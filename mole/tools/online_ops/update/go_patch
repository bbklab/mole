#!/bin/bash

export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"

# BASE DIR DEF
BASE_DIR=$( cd $(dirname $0) && pwd)

# INST DIR DEF 
INST_DIR="/usr/local/eyou/toolmail"

# UPDATE DEF
UPDATE_FLOG="${BASE_DIR}/update.log"
UPDATE_BACK="${BASE_DIR}/pre-backup"

# SEP DEF
SEPERATOR="~~~"

# REQUIRED_UTILS DEF
REQUIRED_UTILS=(
	"/bin/cat"
        "/bin/awk"
        "/bin/sed"
	"/bin/cp"
	"/bin/rm"
	"/bin/tar"
	"/bin/gzip"
	"/bin/mkdir"
        "/usr/bin/md5sum"
	"/usr/bin/tr"
)
        

#### Function Def ####

# Print Help
# 
show_help() {
cat << EOF
Usage:          ./${0##*/}   	[{cfgfile}]  {workmode}
Note:	cfgfile	 ~   not necessary
Note:	workmode ~   print, check, backup, go	(default: print)
Example:        ./${0##*/}   	print
Example:        ./${0##*/}   	check
Example:        ./${0##*/}   	backup
Example:        ./${0##*/}   	go
EOF
exit 0
}

# Terminal color
#
echo_green() {
  local content=$*
  echo -e "\033[1;32m${content}\033[0m\c "
}
echo_yellow() {
  local content=$*
  echo -e "\033[1;33m${content}\033[0m\c "
}
echo_red() {
  local content=$*
  echo -e "\033[1;31m${content}\033[0m\c "
}

# Util Check
#
util_check() {
  local lacklst=
  for util in ${REQUIRED_UTILS[*]}; do
        if [ ! -f "${util}" ] || [ ! -x "${util}" ]; then
                lacklst="${lacklst} ${util}"
        fi
  done
  [ -n "${lacklst}" ] && echo -en "${lacklst}"
}

# Read INI File Section
# Usage		: read_ini {ini_file} {section}
# Example	: read_ini "${update_fcfg}" modify
#
read_ini() {
	local inifile="$1"  section="$2"
	/bin/cat "${inifile}" 2>&- | /usr/bin/tr '\t' ' ' | /bin/awk '\
		($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next} \
		( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit} \
		(k==1 && x==1 && $0!~/^[ \t]*$/ && $0!~/^[ \t]*;/){print}' |\
	/bin/sed -e 's/^[ \t]*//; s/[ \t]*$//; s/^\"//; s/\"$//' 2>&-
}

# Write Log
# 
log() {
	echo "$(date +%s)" "$(date +%F_%T)" "${*}" >> ${UPDATE_FLOG}
}

# do add
do_add() {
	local src="$1"  dst="$2"
	local errstr=
	errstr=$( /bin/cp -f "$src" "$dst" 2>&1 1>/dev/null )
	if [ "$?" == "0" ]; then
		log "[SUCC] addnew [$src] to [$dst]"
		((succnum++))
		return 0
	else
		log "[FAIL] addnew [$src] to [$dst] (${errstr})"
		((failnum++))
		return 1
	fi
}

# do replace
do_replace() {
	local src="$1"  dst="$2"
	local errstr=
	errstr=$( /bin/cp -f "$src" "$dst" 2>&1 1>/dev/null )
	if [ "$?" == "0" ]; then
		log "[SUCC] replace [$src] to [$dst]"
		((succnum++))
		return 0
	else
		log "[FAIL] replace [$src] to [$dst] (${errstr})"
		((failnum++))
		return 1
	fi
}

# check md5sum
copy_check() {
	local src="$1"  dst="$2"
	if [ -f "${src}" ] && [ -f "${dst}" ]; then
		:
	else
		log "[FAIL] md5check on not exist file [${src}] or [${dst}]"
		return 1
	fi
	local md51=$( /usr/bin/md5sum "$src" 2>&- | /bin/awk '{print $1}' )
	local md52=$( /usr/bin/md5sum "$dst" 2>&- | /bin/awk '{print $1}' )
	if [ "${md51}" == "${md52}" ]; then
		log "[SUCC] md5check [$src] == [$dst]"
		((succnum++))
		return 0
	else
		log "[FAIL] md5check [$src] <> [$dst]"
		((failnum++))
		return 1
	fi
}

# update remove
do_remove() {
	local file="$1"
	local errstr=
	if [ ! -f "${file}" ]; then
		log "[FAIL] remove on not exist file [${file}]"
		return 1
	fi
	errstr=$( /bin/rm -f "$file" 2>&1 1>/dev/null )
	if [ "$?" == "0" ]; then
		log "[SUCC] remove [$file]"
		((succnum++))
		return 0
	else
		log "[FAIL] remove [$file] (${errstr})"
		((failnum++))
		return 1
	fi
}

# check remove
remove_check() {
	local file="$1"
	if [ ! -e "$file" ]; then
		log "[SUCC] remove check [$file]"
		((succnum++))
		return 0
	else
		log "[FAIL] remove check [$file]"
		((failnum++))
		return 1
	fi
}

# backup
do_backup() {
	local src="$1"  backup_dst="$2"
	local errstr=
	local dirpath="${src%/*}"
	local dstdir="${backup_dst}/${dirpath}"
	errstr=$( /bin/mkdir -p "${dstdir}"  2>&1 1>/dev/null )
	if [ "$?" == "0" ]; then
		errstr=$( /bin/cp -afL "${src}" "${dstdir}" 2>&1 1>/dev/null )
		if [ "$?" == "0" ]; then
			log "[SUCC] backup [$src] to [${dstdir}]"
			((succnum++))
			return 0
		else
			log "[FAIL] backup [$src] to [${dstdir}] (${errstr})"
			((failnum++))
			return 1
		fi
	else
		log "[FAIL] create backup directory [${dstdir}] (${errstr})"
		((failnum++))
		return 1
	fi
}



# Main Begin ...
#

# check utils
util_lack=$( util_check )
if [ -n "${util_lack}" ]; then
        echo_red "lack utils: [${util_lack}]";echo
        exit 1
fi

# check root privileges
if [ "$(id -u)" != "0" ]; then
	echo_red "root privileges required!";echo
	exit 1
fi


# 1. get args
update_fcfg="$1"
workmode="$2"		# print, check, backup, go  (default=print)


# 2. check args
[ -z "$*" ] && show_help;
[ -z "${update_fcfg}" ] && show_help
if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "?" ]; then
	show_help
elif [ -f "${update_fcfg}" ] && [ -s "${update_fcfg}" ]; then
	:
else
	echo_red "$(echo_red "[${update_fcfg}] not prepared!")";echo;
	exit 1
fi

case "${workmode}" in
"")				workmode="print"	;;
("print"|"check"|"backup"|"go")
				:			;;
*)
				show_help		;;
esac

# 3. log start
log
log
log "update start ..."
log "work mode = ${workmode}"

# 4. read change lst
newaddlst=$( read_ini "${update_fcfg}" addnew 2>&- )
removelst=$( read_ini "${update_fcfg}" remove 2>&- )
modifylst=$( read_ini "${update_fcfg}" modify 2>&- )
backuplst=$( read_ini "${update_fcfg}" backup 2>&- )
newaddnum=$( echo -e "${newaddlst}" | /bin/sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
removenum=$( echo -e "${removelst}" | /bin/sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
modifynum=$( echo -e "${modifylst}" | /bin/sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
backupnum=$( echo -e "${backuplst}" | /bin/sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
log "newaddnum=${newaddnum}, remove=${removenum}, modify=${modifynum}, backup=${backupnum}"

failnum=0
succnum=0
total=0

# 5. action do backup
if [ -n "${backuplst}" ]; then
	backup_path="${UPDATE_BACK}/$(date +%Y%m%d-%H%M%S)"
	for fbackup in `echo "${backuplst}"`
	do
		fbackup="${INST_DIR}/${fbackup}"
		if [ "${workmode}" == "print" ]; then
			echo -e "[backup] ${fbackup}"
		elif [ "${workmode}" == "check" ]; then
			if [ -f "${fbackup}" ]; then
				echo "$(echo_green "[SUCC]") module=[backup] action=[check] ${fbackup} prepared!"
			else
				echo "$(echo_red "[FAIL]") module=[backup] action=[check] ${fbackup} not prepared!"
			fi
		elif [ "${workmode}" == "backup" ]; then
			((total++))
			do_backup "${fbackup}" "${backup_path}"
			if [ "$?" == "0" ]; then
				echo "$(echo_green "[SUCC]") module=[backup] action=[backup] ${fbackup}"
			else
				echo "$(echo_red "[FAIL]") module=[backup] action=[backup] ${fbackup}"
			fi
		elif [ "${workmode}" == "go" ]; then
			((total++))
			do_backup "${fbackup}" "${backup_path}"
		fi
	done
fi

# 8. action do remove
if [ -n "${removelst}" ]; then
	for fremove in `echo "${removelst}"`
	do
		fremove_dst="${INST_DIR}/${fremove}"
		if [ "${workmode}" == "print" ]; then
			echo -e "[remove] ${fremove_dst}"
		elif [ "${workmode}" == "check" ]; then
			if [ -f "${fremove_dst}" ]; then
				echo "$(echo_green "[SUCC]") module=[remove] action=[check] ${fremove_dst} prepared!"
			else
				echo "$(echo_red "[FAIL]") module=[remove] action=[check] ${fremove_dst} not prepared!"
			fi
		elif [ "${workmode}" == "backup" ]; then
			break;
		elif [ "${workmode}" == "go" ]; then
			((total++))
			do_remove "${fremove_dst}"
			remove_check "${fremove_dst}"
		fi
	done
fi

# 9. action do add
if [ -n "${newaddlst}" ]; then
	for fadd in `echo "${newaddlst}"`
	do
		fadd_src=$(echo -e "${fadd}" | /bin/awk -F "${SEPERATOR}" '{print $2}')
		fadd_dst=$(echo -e "${fadd}" | /bin/awk -F "${SEPERATOR}" '{print $1}')
		fadd_src="${BASE_DIR}/${fadd_src}/${fadd_dst}"
		fadd_dst="${INST_DIR}/${fadd_dst}"
		if [ "${workmode}" == "print" ]; then
			echo -e "[newadd] ${fadd_src} to ${fadd_dst}"
		elif [ "${workmode}" == "check" ]; then
			if [ -f "${fadd_src}" ]; then
				echo "$(echo_green "[SUCC]") module=[addnew] action=[check] src=${fadd_src} prepared!"
				if [ ! -d "${fadd_dst%/*}" ]; then
					echo "$(echo_red "[FAIL]") module=[addnew] action=[check] dest-dir(${fadd_dst%/*}) not prepared! you want to add newdir?"
				elif [ -f "${fadd_dst}" ]; then
					echo "$(echo_red "[FAIL]") module=[addnew] action=[check] dest(${fadd_dst}) not empty!"
				else
					echo "$(echo_green "[SUCC]") module=[addnew] action=[check] dest empty waitting!"
				fi
			else
				echo "$(echo_red "[FAIL]") module=[addnew] action=[check] src=${fadd_src} not prepared!"
			fi
		elif [ "${workmode}" == "backup" ]; then
			break;
		elif [ "${workmode}" == "go" ]; then
			((total++))
			do_add "${fadd_src}" "${fadd_dst}"
			copy_check "${fadd_src}" "${fadd_dst}"
		fi
	done
fi

# 10. action do replace
if [ -n "${modifylst}" ]; then
	for fmodify in `echo "${modifylst}"`
	do
		fmodify_src=$(echo -e "${fmodify}" | /bin/awk -F "${SEPERATOR}" '{print $2}')
		fmodify_dst=$(echo -e "${fmodify}" | /bin/awk -F "${SEPERATOR}" '{print $1}')
		fmodify_src="${BASE_DIR}/${fmodify_src}/${fmodify_dst}"
		fmodify_dst="${INST_DIR}/${fmodify_dst}"
		if [ "${workmode}" == "print" ]; then
			echo -e "[modify] ${fmodify_src} to ${fmodify_dst}"
		elif [ "${workmode}" == "check" ]; then
			if [ -f "${fmodify_src}" ]; then
				echo "$(echo_green "[SUCC]") module=[modify] action=[check] src=${fmodify_src} prepared!"
				if [ -f "${fmodify_dst}" ]; then
					echo "$(echo_green "[SUCC]") module=[modify] action=[check] dest=${fmodify_dst} prepared!"
				else
					echo "$(echo_red "[FAIL]") module=[modify] action=[check] dest=${fmodify_dst} not prepared!"
				fi
			else
				echo "$(echo_red "[FAIL]") module=[modify] action=[check] src=${fmodify_src} not prepared!"
			fi	
		elif [ "${workmode}" == "backup" ]; then
			break;
		elif [ "${workmode}" == "go" ]; then
			((total++))
			do_replace "${fmodify_src}" "${fmodify_dst}"
			copy_check "${fmodify_src}" "${fmodify_dst}"
		fi
	done
fi

# 11. log finished
if [ "${workmode}" == "backup" ] || [ "${workmode}" == "go" ]; then
	log "total=${total}, succ=${succnum}, fail=${failnum}"
fi
log "update finished."
