#!/usr/bin/env bash

#
# Inner Plugin:  periodic record system counter
# Record Following Data
# 	Disk_IO:   /proc/diskstats  /proc/partitions
#	Net_Flow:  /proc/net/dev
# 	CPU_Usage: /usr/bin/vmstat  (not /proc/stat)
# Result: 
# 	file list under directory: {SYSCOUNTER_DIR}
#		- diskio
#		- netfolow
#		- cpuusage
#

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && {
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
        BASE_DIR=${BASE_DIR%/*}
}
if [ -f ${BASE_DIR}/bin/include ] && [ -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }   
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# Return Codes
STATE_SUCC=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=          ### { succ | warn | crit | unknown }
TYPE=           ### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here

# if null or invalid set default.

# check function here
check() {
  local maxnum=10000
  local iofile="${SYSCOUNTER_DIR}/diskio" netfile="${SYSCOUNTER_DIR}/netfolow" cpufile="${SYSCOUNTER_DIR}/cpuusage"

  if [ ! -d "${SYSCOUNTER_DIR}" ]; then
	if ! /bin/mkdir -p "${SYSCOUNTER_DIR}" 2>/dev/null; then
  		EXIT_STATUS="${STATE_CRITICAL}"
  		LEVEL="crit"
  		TYPE="str"
  		CONTENT="create syscounter save directory failed!"
		return
	fi
  fi

  # truncate oversize file
  local linenum=0
  for f in "${iofile}" "${netfile}" "${cpufile}"
  do
	if [ -f "${f}" ] && [ -s "${file}" ]; then
		linenum=$( /bin/awk 'END{print NR}' "${file}" 2>&- )
		if ! is_int "${linenum}"; then
			linenum=0
		fi
		if [ ${linenum} -gt ${maxnum} ]; then
			:> "${f}"
		fi
	fi
  done

  # record io data
  local file1="/proc/diskstats" file2="/proc/partitions"
  if [ -e "${file2}" ]; then
	devlst=$( /bin/awk '($1~/[0-9]+/ && NF==4){a=$1"-"$2"-"$NF; printf "%s\n",a;}' "${file2}" 2>&- )
	if [ -n "${devlst}" ]; then
		{
		for ((i=1;i<=20;i++))
		do
			if [ -e "${file1}" ]; then
				for d in `echo "${devlst}"`
				do
					/bin/awk -v dname="${d}" '(NF==14 && $1"-"$2"-"$3==dname){$1=$2="";print}' "${file1}" 2>/dev/null
				done
			fi
			sleep 1;
		done
		} > "${iofile}"  2>/dev/null
	fi
  fi

  # record net data
  local file="/proc/net/dev"
  if [ -e "${file}" ]; then
	{
	for ((i=1;i<=20;i++))
	do
		# awk 'BEGIN{FS=":"} (NF==2){split($2,a," "); printf("%s: ",$1); for(i in a){printf "%s ",a[i]}; printf "\n"; }' /proc/net/dev 	
		sleep 1;
	done	
	} > "${netfile}" 2>/dev/null
  fi

  # record cpu data


  EXIT_STATUS="${STATE_SUCC}"
  LEVEL="succ"
  TYPE="str"
  CONTENT="Finished"
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}  
