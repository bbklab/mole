#!/usr/bin/env bash

#
# Inner Plugin:  periodic record system counter
# Record Following Data
# 	Disk_IO:   /proc/diskstats  /proc/partitions
#	Net_Flow:  /proc/net/dev
# 	CPU_Usage: /usr/bin/vmstat  (not /proc/stat)
#	IO_Util:   ${UTIL_IOSTAT}
# Result: 
# 	file list under directory: {SYSCOUNTER_DIR}
#		- diskio
#		- netflow
#		- cpuusage
#		- ioutil
#

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && {
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
        BASE_DIR=${BASE_DIR%/*}
}
if [ -f ${BASE_DIR}/bin/include ] && [ -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }   
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# Return Codes
STATE_SUCC=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=          ### { succ | warn | crit | unknown }
TYPE=           ### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here

# if null or invalid set default.

# check function here
check() {
  local maxnum=10000
  local iofile="${SYSCOUNTER_DIR}/diskio"
  local netfile="${SYSCOUNTER_DIR}/netflow"
  local cpufile="${SYSCOUNTER_DIR}/cpuusage"
  local ioutilfile="${SYSCOUNTER_DIR}/ioutil"
  local result=  action=0

  if [ ! -d "${SYSCOUNTER_DIR}" ]; then
	if ! /bin/mkdir -p "${SYSCOUNTER_DIR}" 2>/dev/null; then
  		EXIT_STATUS="${STATE_CRITICAL}"
  		LEVEL="crit"
  		TYPE="str"
  		CONTENT="create saving directory ${SYSCOUNTER_DIR##*/} failed!"
		return
	else
		result="${result} create saving directory ${SYSCOUNTER_DIR##*/} succeed! " 
	fi
  else
	result="${result} saving directory ${SYSCOUNTER_DIR##*/} prepared! ### "
  fi
  ((action++))

  # truncate oversize file
  local linenum=0
  for f in "${iofile}" "${netfile}" "${cpufile}" "${ioutilfile}"
  do
	if [ -f "${f}" ] && [ -s "${f}" ]; then
		linenum=$( /bin/awk 'END{print NR}' "${f}" 2>&- )
		if ! is_int "${linenum}"; then
			linenum=0
		fi
		if [ ${linenum} -gt ${maxnum} ]; then
			:> "${f}"
			result="${result} truncate ${f##*/} with $linenum lines ### "
		else
			result="${result} skip truncating ${f##*/} with $linenum lines ### "
		fi
	fi
  done
  ((action++))

  # record io data
  local file1="/proc/diskstats" file2="/proc/partitions"
  if [ -e "${file2}" ]; then
	devlst=$( /bin/awk '($1~/[0-9]+/ && NF==4){a=$1"-"$2"-"$NF; printf "%s\n",a;}' "${file2}" 2>&- )
	if [ -n "${devlst}" ]; then
		{
		for ((i=1;i<=20;i++))
		do
			if [ -e "${file1}" ]; then
				for d in `echo "${devlst}"`
				do
					/bin/awk -v dname="${d}" '(NF==14 && $1"-"$2"-"$3==dname){$1=$2="";print}' "${file1}" 2>/dev/null
				done
			fi
			sleep 1;
		done
		}  > "${iofile}"  2>/dev/null
		result="${result} saved io data into ${iofile##*/} ### "
	fi
  fi
  ((action++))

  # record device io %util
  local file2="/proc/partitions"
  if [ -e "${file2}" ]; then
	devlst=$( /bin/awk '($1~/[0-9]+/ && NF==4){print $NF;}' "${file2}" 2>&- )
	if [ -n "${devlst}" ]; then
		{
		${UTIL_IOSTAT} -d -x ${devlst} 1 20 2>&- |\
		/bin/awk '(/^[ \t]*$/){next;} \
			(/[0-9]+/){print $1, $NF}'
		} > "${ioutilfile}"  2>/dev/null
		result="${result} saved ioutil data into ${ioutilfile##*/} ### "
	fi
  fi
  ((action++))

  # record net data
  local file="/proc/net/dev"
  if [ -e "${file}" ]; then
	{
	for ((i=1;i<=20;i++))
	do
		/bin/awk 'BEGIN{FS=":";OFS=" "} \
			{ if(NF==2){ \
				printf("%s: ",$1); \
				$1=""; \
				n=split($0,a," "); \
				if(n==16){ \
					print $0; \
				}else{ \
					next; \
				} \
			  }else{ \
				next; \
			  } \
			} ' "${file}" 2>/dev/null  |\
		/bin/awk '{print $1,$2,$3,$10,$11}'
		sleep 1;
	done	
	}  > "${netfile}" 2>/dev/null
	result="${result} saved net data into ${netfile##*/} ### "
  fi
  ((action++))

  # record cpu data
  local vmstat="/usr/bin/vmstat"
  if [ -f "${vmstat}" ] && [ -x "${vmstat}" ]; then
	{
	${vmstat} 1 20 2>&- |\
	/bin/awk '($1!~/[0-9]+/ || NF!=17){next;} \
			{print $13,$14,$15,$16}'
	}  > "${cpufile}" 2>/dev/null
	result="${result} saved cpu data into ${cpufile##*/} ### "
  fi
  ((action++))

  EXIT_STATUS="${STATE_SUCC}"
  LEVEL="succ"
  TYPE="str"
  CONTENT="${0##*/} finished|${action} action finished|${result}"
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}  
