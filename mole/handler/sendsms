#!/bin/bash
#
#
# This Script Responsible for Sending SMS.
# 
#

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}
if [ -f ${BASE_DIR}/bin/include ] && [ -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# === LOAD GETTEXT.SH FILE
#
if [ -f "/usr/bin/gettext.sh" ] && [ -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load [/usr/bin/gettext.sh] failed with status $rc"
                exit 1
        }   
else
        echo "[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit"
        exit 1
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
#
if [ -d "${LOCALE_DIR}" ] && [ -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="mole"
else
        echo "locale directory [${LOCALE_DIR}] not exist or accessable, exit"
        exit 1
fi

# === SET GLOBAL LOCALE
#
glocale=$(read_mole_config global locale)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"               ## read from sysenv
elif [ "${glocale}" == "zh_CN" ] || [ "${glocale}" == "zh_CN.UTF-8" ] || [ "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" ] || [ "${glocale}" == "en_US.UTF-8" ] || [ "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi


# def help
#
show_usage(){
  echo "Usage:   ./${0##*/} -f {plugin_name} -s {jobid} -i \"{sms_content}\" "
  echo "Example: ./${0##*/} -f sysload -s TESTABCD -i \"test sms content\" "
  exit 1
}

### Main Body Begin...

if [ "$1" == "-h" ] || [ "$1" == "help" ] || [ "$1" == "?" ]; then
	show_usage
fi

# read args
while getopts f:s:i: opt
do
        case ${opt} in
        "f")
                plugin_name="${OPTARG}"   ;;
        "s")
                jobid="${OPTARG}"         ;;
        "i")
                content="${OPTARG}"       ;;
	*)	
		show_usage		  ;;
        esac
done

# check args 
if [ -z "${plugin_name}" ] || [ -z "${jobid}" ] || [ -z "${content}" ]; then
	show_usage
fi
from="${plugin_name}.${jobid}"

write_log -f "${SENDSMS_LOG}" ""
write_log -f "${SENDSMS_LOG}" "[${from}]" "INFO: begin to sendsms"

# read global.name / read plugin sms-receviers 
gname=$(get_global_name)
receviers=$(get_sms_receviers "${plugin_name}")
write_log -f "${SENDSMS_LOG}" "[${from}]"\
	"INFO: set name=[${gname}], receviers=[${receviers}]. CONTINUE"

# set sms common info
sms_common="$(gettext "HostName:")${gname},"
sms_common="${sms_common} $(gettext "Time:")$(date +%F_%T),"
sms_common="${sms_common} $(gettext "Content:")"

# reset content (add sms_common)
content="${sms_common}${content}"

# check sms length
sms_maxlen=$(read_mole_config sms sms_maxlen)
is_int "${sms_maxlen}" || sms_maxlen=140
sms_length=${#content}
if [ ${sms_length} -gt ${sms_maxlen} ]; then
	write_log -f "${SENDSMS_LOG}" "[${from}]"\
		"INFO: sms length [${sms_length}]"\
		"exceed than [${sms_maxlen}]. TRUNCATE"
	content="${content:0:${sms_maxlen}}"
else
	write_log -f "${SENDSMS_LOG}" "[${from}]"\
		"INFO: sms length=[${sms_length}]. CONTINUE"
fi
write_log -f "${SENDSMS_LOG}" "[${from}]"\
	"INFO: set content=[${content}]. CONTINUE"


# set initial result
faillst=
succlst=
vexit=0

# set SMS Handler:  {SMS_HANDLER}
SMS_HANDLER=
sms_handler=$(read_mole_config sms sms_handler)
write_log -f "${SENDSMS_LOG}" "[${from}]"\
	"INFO: sms handler mode [${sms_handler}]. CONTINUE"

if [ "${sms_handler}" == "cnpc" ]; then
	SMS_HANDLER="$(read_mole_config sms cnpc_smspath)"
elif [ "${sms_handler}" == "esop" ]; then
	SMS_HANDLER=
elif [ "${sms_handler}" == "none" ]; then
	SMS_HANDLER=
else
	SMS_HANDLER=
fi

# check SMS Handler
if [ -z "${SMS_HANDLER}" ]; then
	write_log -f "${SENDSMS_LOG}" "[${from}]"\
		"ERROR: SMS handler not defined. EXIT"
	faillst="${receviers}"; vexit=1
	echo -en "${succlst}  ###  ${faillst}"
	exit "${vexit}"
elif [ -f "${SMS_HANDLER}" ] && [ -x "${SMS_HANDLER}" ]; then
	write_log -f "${SENDSMS_LOG}" "[${from}]"\
		"INFO: SMS handler [${SMS_HANDLER}] prepared. CONTINUE"
	sms_dirpath=$(dirname ${SMS_HANDLER} 2>&-)
	if cd $sms_dirpath >/dev/null 2>&1; then
		write_log -f "${SENDSMS_LOG}" "[${from}]"\
			"INFO: changed into ${sms_dirpath}. CONTINUE"
	else
		write_log -f "${SENDSMS_LOG}" "[${from}]"\
			"ERROR: change directory into [${sms_dirpath}] failed. EXIT"
		faillst="${receviers}"; vexit=1
		echo -en "${succlst}  ###  ${faillst}"
		exit "${vexit}"
	fi
else
	write_log -f "${SENDSMS_LOG}" "[${from}]"\
		"ERROR: SMS handler [${SMS_HANDLER}] not prepared. EXIT"
	faillst="${receviers}"; vexit=1
	echo -en "${succlst}  ###  ${faillst}"
	exit "${vexit}"
fi

# set charset / convert encoding for {content}
charset=$(read_mole_config sms character_set)
envlang=
if [ "${charset}" == "gbk" ] || [ "${charset}" == "gb2312" ] ; then
	envlang="zh_CN.GB2312"
	content="$(echo -e "${content}" | /usr/bin/iconv -f utf8 -t gbk 2>&-)"
elif [ "${charset}" == "utf8" ]; then
	envlang="en_US.UTF-8"
else
	envlang="zh_CN.GB2312"
	content="$(echo -e "${content}" | /usr/bin/iconv -f utf8 -t gbk 2>&-)"
fi
write_log -f "${SENDSMS_LOG}" "[${from}]"\
	"INFO: charset=[${charset}], set enviroment lang=[${envlang}]. CONTINUE"

# set timeout
timeout=$(read_mole_config sms timeout)
if ! is_int "${timeout}"; then
	timeout=10
fi
write_log -f "${SENDSMS_LOG}" "[${from}]"\
	"INFO: timeout=[${timeout}]. CONTINUE"

# sending sms
t_s=0
t_e=0
t=$(echo -ne "${receviers}" | awk 'END{print NF}')
n=0
if [ "$t" -le "0" ]; then
	write_log -f "${SENDSMS_LOG}" "[${from}]"\
		"ERROR: no invalid receviers [${receviers}]"
else 
	for x in `echo "${receviers}"`
	do
		((n+=1))
		write_log -f "${SENDSMS_LOG}" "[${from}]"\
			"INFO: [${n}/${t}], sending SMS to [${x}] ..."
		(
			export LANG=${envlang};
			export LC_ALL=${envlang};
			${SMS_HANDLER} "${x}" "${content}" >/dev/null 2>&1
		) &
		pid=$!
		write_log -f "${SENDSMS_LOG}" "[${from}]"\
			"INFO: [${n}/${t}], sendsms backgroup pid: ${pid}"
		timer=0
		while [ -d "/proc/${pid}" ]
		do
			((timer++))
			sleep 1
			if [ "$(echo "${timer}>=${timeout}"|bc 2>&-)" == "1" ]; then
				write_log -f "${SENDSMS_LOG}" "[${from}]"\
					"INFO: [${n}/${t}], sendsms timeout [${timer} >= ${timeout}]"
				kidpids=$(get_pidkids_bypid "${pid}")
				write_log -f "${SENDSMS_LOG}" "[${from}]"\
					"INFO: [${n}/${t}], terminating all kid pids: ${kidpids}"
				for cpid in `echo ${kidpids}`
				do
					if [ -d "/proc/${cpid}" ]; then
						 kill -15  "${cpid}" 1>&- 2>&-
					fi
				done
				sleep 0.3
				if [ -d "/proc/${pid}" ]; then
					write_log -f "${SENDSMS_LOG}" "[${from}]"\
						"INFO: [${n}/${t}], sending SIGTERM to father pid: ${pid}"
					kill -15  "${pid}" 1>&- 2>&-
				fi
				sleep 0.3
				if [ -d "/proc/${pid}" ]; then
					write_log -f "${SENDSMS_LOG}" "[${from}]"\
						"INFO: [${n}/${t}], sending SIGKILL to father pid: ${pid}"
					kill -9   "${pid}" 2>&- 2>&-
				fi
			fi
		done
		wait ${pid} 2>/dev/null
		_rc=$?
		if [ "${_rc}" == "0" ]; then
			((t_s+=1))
			succlst="${x} ${succlst}"
			write_log -f "${SENDSMS_LOG}" "[${from}]"\
				"INFO: [${n}/${t}], sending SMS to [${x}] succeed!"
		else
			((t_e+=1))
			vexit=1
			faillst="${x} ${faillst}"
			write_log -f "${SENDSMS_LOG}" "[${from}]"\
				"INFO: [${n}/${t}], sending SMS to [${x}] failed! (rc=${_rc})"
		fi
	done
fi

write_log -f "${SENDSMS_LOG}" "[${from}]"\
	"INFO: end to sendsms. result: [total=${t}  success=${t_s}  fail=${t_e}]"
write_log -f "${SENDSMS_LOG}" ""
write_log -f "${SENDSMS_LOG}" ""
echo -en "${succlst}  ###  ${faillst}"
exit "${vexit}"
