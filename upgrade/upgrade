#!/bin/bash
#
#
# This Script Responsible for Upgrade Esop Agent
# 
# Return Code:  0|1   OK|FAIL
#


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}
if [ -f ${BASE_DIR}/bin/include ] && [ -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# Check Running ENV
if [ "${ESOP_UPGRADE_MODE}" != "1" ] || [ "${ESOP_RPM_UPGRADE}" != "1" ];  then
	echo_red "only running on esop rpm upgrade!";echo;
	write_log -f "${UPGRADE_LOG}" "[ERROR] only running on esop rpm upgrade!"
	exit 1
fi

# RPM (%pre) Previous Action Result
OLD_ESOP_SAVEDIR="/var/tmp/oldesop-rpmsavedir"
OLD_ESOP_VERFILE="${OLD_ESOP_SAVEDIR}/.version_upgrade"

# Check Previous Version
OLD_ESOP_VERSION="$(cat ${OLD_ESOP_VERFILE} 2>&- | tr -d '\012\015')"
if [ -z "${OLD_ESOP_VERSION}" ]; then
	write_log -f "${UPGRADE_LOG}" "[ERROR] previous esop version unknown, maybe already has been upgraded or new install!"
	exit 1
fi
if [ "${OLD_ESOP_VERSION}" != "1.0.1" ]; then
	write_log -f "${UPGRADE_LOG}" "[ERROR] previous esop version [${OLD_ESOP_VERSION}] not supported!"
	exit 1
fi

# Set Upgrade Mole Configs (1.0.1 configs)
ARRAY_MOLECONF_UPGRADE=(
	"global"	"scan_interval attach_ini_mail sysload_uplimit 
			max_kidsnum plugin_maxlen handler_maxlen notify_onmisform locale "
        "default"       "enable comment frequency exec_tmout maxerr_times take_snapshot mail_notify
			sms_notify post_notify mail_receviers sms_receviers attsnap_mail auto_handle
			auto_handler locale debug "
        "mole_clear_overdue"    "frequency exec_tmout tmpfile_reserve_time logfile_reserve_time 
				snapfile_reserve_time snapdir_maxsize"
        "mole_log_rotate"       "frequency exec_tmout force_size_uplimit take_over_proxylog"
        "mole_self_check"       "frequency exec_tmout"
        "mole_iam_alive"        "frequency exec_tmout"
        "mole_check_remote"     "frequency exec_tmout"
        "mole_report_conf"      "frequency exec_tmout"
        "sendmail"      "smtp_server smtp_server_port auth_user auth_pass timeout charset"
        "postlog"       "post_server post_server_port post_port_type post_timeout post_max_length post_debug"
)
ARRAY_MOLEFORCECONF_UPGRADE=(
	"global"	"id parter_id name"
)

# Set Upgrade Proxy Configs (1.0.1 configs)
ARRAY_OLD_PROXY_CONF=(
	"etc/etm_agent.ini"
	"etc/etm_phptd.ini"
	"etc/php/php.ini"
)

# Initialize Counter
upgrade_skip=0
upgrade_succ=0
upgrade_fail=0


#
# Func Def
#

restore_mole_single_config() {
	local section=$1  key=$2  is_force=$3
	local old=$(read_mole_config -f "${OLD_MOLE_CONF}" "${section}" "${key}")
	local new=$(read_mole_config "${section}" "${key}")
	local rc=
	if [ "${old}" != "${new}" ]; then
		if [ "${is_force}" == "1" ]; then
			update_mole_config "force" "${section}" "${key}" "${old}"
		else
			update_mole_config "${section}" "${key}" "${old}"
		fi
		rc=$?
		if [ $rc -ne 0 ]; then
			((upgrade_fail++))
			write_log -f "${UPGRADE_LOG}"  "[FAIL] restore mole config [${section}-${key}] => [${old}] (${rc})"
		else
			((upgrade_succ++))
			write_log -f "${UPGRADE_LOG}"  "[SUCC] restore mole config [${section}-${key}] => [${old}] (${rc})"
		fi
		return $rc
	else
		((upgrade_skip++))	
		write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole config [${section}-${key}] unchanged!"
	fi
}

restore_mole_all_config() {
	OLD_MOLE_CONF="${OLD_ESOP_SAVEDIR}/conf/.mole.ini"
	if [ -f "${OLD_MOLE_CONF}" ] && [ -s "${OLD_MOLE_CONF}" ]; then
		for ((i=0;i<${#ARRAY_MOLECONF_UPGRADE[*]};i++))
		do
			if (( $i%2 == 0)); then
				section=${ARRAY_MOLECONF_UPGRADE[$i]}
			else
				keyarry=( ${ARRAY_MOLECONF_UPGRADE[$i]} )
				for ((x=0;x<${#keyarry[*]};x++))
				do
					key="${keyarry[$x]}"
					restore_mole_single_config "${section}" "${key}"
				done
			fi
		done

		for ((i=0;i<${#ARRAY_MOLEFORCECONF_UPGRADE[*]};i++))
		do
			if (( $i%2 == 0)); then
				section=${ARRAY_MOLEFORCECONF_UPGRADE[$i]}
			else
				keyarry=( ${ARRAY_MOLEFORCECONF_UPGRADE[$i]} )
				for ((x=0;x<${#keyarry[*]};x++))
				do
					key="${keyarry[$x]}"
					restore_mole_single_config "${section}" "${key}" "1"
				done
			fi
		done
	else
		write_log -f "${UPGRADE_LOG}" "[ERROR] previous esop rpmsave mole config file not prepared!"
		return 1
	fi
}

restore_proxy_all_config() {
	OLDSAVE_DIR="${OLD_ESOP_SAVEDIR}"
	NEWINST_DIR="/usr/local/esop/agent"
	local rc= errstr=
	for ((i=0;i<${#ARRAY_OLD_PROXY_CONF[*]};i++))
	do
		src="${OLDSAVE_DIR}/${ARRAY_OLD_PROXY_CONF[$i]}"
		dst="${NEWINST_DIR}/${ARRAY_OLD_PROXY_CONF[$i]}"
		if [ -f "${src}" ]; then
			errstr=$( /bin/cp -f "${src}" "${dst}" 2>&1 1>/dev/null )
			rc=$?
			if [ $rc -eq 0 ]; then
				((upgrade_succ++))
				write_log -f "${UPGRADE_LOG}"  "[SUCC] restore proxy config [${ARRAY_OLD_PROXY_CONF[$i]}] (${rc})"
			else
				((upgrade_fail++))
				write_log -f "${UPGRADE_LOG}"  "[FAIL] restore proxy config [${ARRAY_OLD_PROXY_CONF[$i]}] (${rc}) (${errstr})"
			fi
		else
			((upgrade_skip++))
			write_log -f "${UPGRADE_LOG}"  "[SKIP] restore proxy config [${src}] not exists!"
		fi
	done
}


# Set Old Mole Config File Path


#
# Main Body Begin ...
#

write_log -f "${UPGRADE_LOG}" ''
write_log -f "${UPGRADE_LOG}" ''
write_log -f "${UPGRADE_LOG}" '[INFO] esop upgrade from 1.0.1 to 1.1.0 start.'

restore_mole_all_config
restore_proxy_all_config


errstr=$(/bin/cp /dev/null "${OLD_ESOP_VERFILE}" 2>&1 1>/dev/null)
if [ $? -eq 0 ]; then
	write_log -f "${UPGRADE_LOG}"  "[INFO] empty upgrade tag file ${OLD_ESOP_VERFILE}"
else
	write_log -f "${UPGRADE_LOG}"  "[ERROR] empty upgrade tag file ${OLD_ESOP_VERFILE} [${errstr}]"
fi

write_log -f "${UPGRADE_LOG}"  "[INFO] esop upgrade from 1.0.1 to 1.1.0 finished. "\
					"[skip=${upgrade_skip}, succ=${upgrade_succ}, fail=${upgrade_fail}]"
