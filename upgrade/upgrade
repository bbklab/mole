#!/bin/bash
#
#
# This Script Responsible for Upgrade Esop Agent
# 
# Return Code:  0|1   OK|FAIL
#


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}
if [ -f ${BASE_DIR}/bin/include ] && [ -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# Check Running ENV
if [ "${ESOP_UPGRADE_MODE}" != "1" ] || [ "${ESOP_RPM_UPGRADE}" != "1" ];  then
	echo_red "only running on esop rpm upgrade!";echo;
	write_log -f "${UPGRADE_LOG}" "[ERROR] only running on esop rpm upgrade!"
	exit 1
fi

# RPM (%pre) Previous Action Result
OLD_ESOP_SAVEDIR="/var/tmp/oldesop-rpmsavedir"
OLD_ESOP_VERFILE="${OLD_ESOP_SAVEDIR}/.version_upgrade"

# Check Previous Version
OLD_ESOP_VERSION="$(cat ${OLD_ESOP_VERFILE} 2>&- | tr -d '\012\015')"
if [ -z "${OLD_ESOP_VERSION}" ]; then
	write_log -f "${UPGRADE_LOG}" "[ERROR] previous esop version unknown, maybe already has been upgraded or new install!"
	exit 1
fi
if [ "${OLD_ESOP_VERSION}" != "1.0.1" ]; then
	write_log -f "${UPGRADE_LOG}" "[ERROR] previous esop version [${OLD_ESOP_VERSION}] not supported!"
	exit 1
fi

ARRAY_OLDMOLE_BASECONF=(
  enable
  comment
  frequency
  exec_tmout
  maxerr_times
  take_snapshot
  mail_notify
  sms_notify
  post_notify
  mail_receviers
  sms_receviers
  attsnap_mail
  auto_handle
  auto_handler
  locale
  debug
)

# Set Restore Mole Configs (1.0.1 configs)
# List all 1.0.1 configs here.
ARRAY_MOLECONF_RESTORE=(
	"global"		"scan_interval attach_ini_mail sysload_uplimit 
				max_kidsnum plugin_maxlen handler_maxlen notify_onmisform locale "
        "default"       	"enable comment frequency exec_tmout maxerr_times take_snapshot mail_notify
				sms_notify post_notify mail_receviers sms_receviers attsnap_mail auto_handle
				auto_handler locale debug "
        "mole_clear_overdue"    "frequency exec_tmout tmpfile_reserve_time logfile_reserve_time 
				snapfile_reserve_time snapdir_maxsize"
        "mole_log_rotate"       "frequency exec_tmout force_size_uplimit take_over_proxylog"
        "mole_self_check"       "frequency exec_tmout"
        "mole_iam_alive"        "frequency exec_tmout"
        "mole_check_remote"     "frequency exec_tmout"
        "mole_report_conf"      "frequency exec_tmout"
        "sendmail"      	"smtp_server smtp_server_port auth_user auth_pass timeout charset"
        "postlog"       	"post_server post_server_port post_port_type post_timeout post_max_length post_debug"
	# plugins' config
	"cpu_usage"		"${ARRAY_OLDMOLE_BASECONF[*]} uplimit wa_uplimit sy_uplimit us_uplimit"
	"disk_fs"		"${ARRAY_OLDMOLE_BASECONF[*]} fstype exclude"
	"disk_iostat"		"${ARRAY_OLDMOLE_BASECONF[*]} dev_list util_uplimit"
	"disk_space"		"${ARRAY_OLDMOLE_BASECONF[*]} fstype exclude_mpoint space_pct inode_pct"
	"memory"		"${ARRAY_OLDMOLE_BASECONF[*]} mem_uplimit swp_uplimit"
	"notify_oom"		"${ARRAY_OLDMOLE_BASECONF[*]} messagefile"
	"notify_syslogin" 	"${ARRAY_OLDMOLE_BASECONF[*]} authfile"
	"port"			"${ARRAY_OLDMOLE_BASECONF[*]} port_list"
	"process"		"${ARRAY_OLDMOLE_BASECONF[*]} pslist_file"
	"sysload"		"${ARRAY_OLDMOLE_BASECONF[*]} load_uplimit"
	"system_dyninfo"	"${ARRAY_OLDMOLE_BASECONF[*]}"		# exclude:  data_source, as hard to update
	"system_fixinfo"	"${ARRAY_OLDMOLE_BASECONF[*]}"
	"tcp_conn"		"${ARRAY_OLDMOLE_BASECONF[*]} port_list"
	"traffic"		"${ARRAY_OLDMOLE_BASECONF[*]} ifdev_lst"
)
ARRAY_MOLEFORCECONF_RESTORE=(
	"global"		"id parter_id name"
)
# Skip restore configs, which will use new value instead restoring old values, 
# Only skip the [section]-[key] if the old value equals {old-value}, as bin/autoconf
# runs before upgrade/upgrade, so skipped [section]-[key] here use new value.
# Note: {old-value} empty means skip forcely, without old-value checking.
ARRAY_SKIP_RESTORE_CONF=(
	#section		#key		#old-value
	"cpu_usage"		"uplimit"	"75"
	"cpu_usage"		"wa_uplimit"	"20"
	"cpu_usage"		"sy_uplimit"	"30"
	"cpu_usage"		"us_uplimit"	"50"
	"disk_fs"		"maxerr_times"	"3"
	"disk_iostat"		"util_uplimit"	"70"
	"disk_space"		"space_pct"	"90"
	"disk_space"		"inode_pct"	"90"
	"memory"		"exec_tmout"	"1min"
	"notify_syslogin"	"mail_notify"	"all"
	"notify_syslogin"	"post_notify"	"all"
	"port"			"exec_tmout"	"1min"
	"port"			"maxerr_times"	"1"
	"port"			"port_list"	""
	"tcp_conn"		"port_list"	""
	"traffic"		"ifdev_lst"	"eth0:30M/s:50M/s:0:0"
)

# Set Restore Proxy Configs (1.0.1 configs)
ARRAY_OLD_PROXY_CONF=(
	"etc/etm_agent.ini"
	"etc/etm_phptd.ini"
	"etc/php/php.ini"
)

# Initialize Counter
upgrade_skip=0
upgrade_succ=0
upgrade_fail=0
upgrade_note=0


#
# Func Def
#

is_should_skip() {
	local section=$1  key=$2  value=$3

	local i=
	for((i=0;i<${#ARRAY_SKIP_RESTORE_CONF[*]};i++))
	do
		if [ "${ARRAY_SKIP_RESTORE_CONF[$i]}" == "${section}" ]; then
			if [ "${ARRAY_SKIP_RESTORE_CONF[$i+1]}" == "${key}" ]; then
				if [ -z "${ARRAY_SKIP_RESTORE_CONF[$i+2]}" ]; then
					return 0
				elif [ "${ARRAY_SKIP_RESTORE_CONF[$i+2]}" == "${value}" ]; then
					return 0
				else
					continue
				fi
			fi
		fi
	done
	
	return 1
}

restore_mole_single_config() {
	local configfile=$1 section=$2  key=$3  is_force=$4
	local old=$(read_mole_config -f "${configfile}" "${section}" "${key}")
	local new=$(read_mole_config "${section}" "${key}")
	local rc=

	if is_should_skip "${section}" "${key}" "${old}" >/dev/null 2>&1; then
		((upgrade_skip++))	
		write_log -f "${UPGRADE_LOG}"  "[SKIP] restore config [${section}-${key}], as old valud = [${old}]"
	elif [ "${old}" != "${new}" ]; then
		if [ "${is_force}" == "1" ]; then
			if [ -z "${old}" ]; then
				clear_mole_config "force" "${section}" "${key}"
			else
				update_mole_config "force" "${section}" "${key}" "${old}"
			fi
		else
			if [ -z "${old}" ]; then
				clear_mole_config "${section}" "${key}"
			else
				update_mole_config "${section}" "${key}" "${old}"
			fi
		fi
		rc=$?
		if [ $rc -ne 0 ]; then
			((upgrade_fail++))
			write_log -f "${UPGRADE_LOG}"  "[FAIL] restore config [${section}-${key}] => [${old}] (${rc})"
		else
			((upgrade_succ++))
			write_log -f "${UPGRADE_LOG}"  "[SUCC] restore config [${section}-${key}] => [${old}] (${rc})"
		fi
		return $rc
	else
		((upgrade_skip++))	
		write_log -f "${UPGRADE_LOG}"  "[SKIP] restore config [${section}-${key}] unchanged!"
	fi
}

restore_mole_all_config() {
	OLD_MOLE_CONF="${OLD_ESOP_SAVEDIR}/conf/.mole.ini"
	if [ -f "${OLD_MOLE_CONF}" ] && [ -s "${OLD_MOLE_CONF}" ]; then
		local i=  x=
		for ((i=0;i<${#ARRAY_MOLECONF_RESTORE[*]};i++))
		do
			if (( $i%2 == 0)); then
				section=${ARRAY_MOLECONF_RESTORE[$i]}
			else
				keyarry=( ${ARRAY_MOLECONF_RESTORE[$i]} )
				for ((x=0;x<${#keyarry[*]};x++))
				do
					key="${keyarry[$x]}"
					if is_sub "${section}" "${ARRAY_GLOBAL_SECTION[*]}"; then
						restore_mole_single_config "${OLD_MOLE_CONF}" "${section}" "${key}"
					elif [[ "${section}" =~ ${INNER_BEGIN} ]]; then
						restore_mole_single_config "${OLD_MOLE_CONF}" "${section}" "${key}"
					else
						plugin_config_file="${OLD_ESOP_SAVEDIR}/conf/${section}.ini"
						if [ -f "${plugin_config_file}" ] && [ -s "${plugin_config_file}" ]; then
							restore_mole_single_config "${plugin_config_file}" "${section}" "${key}"
						else
							((upgrade_note++))
							write_log -f "${UPGRADE_LOG}" "[NOTICE] previous rpmsave plugin config ${section}.ini not prepared!"
						fi
					fi
				done
			fi
		done

		i=  x=
		for ((i=0;i<${#ARRAY_MOLEFORCECONF_RESTORE[*]};i++))
		do
			if (( $i%2 == 0)); then
				section=${ARRAY_MOLEFORCECONF_RESTORE[$i]}
			else
				keyarry=( ${ARRAY_MOLEFORCECONF_RESTORE[$i]} )
				for ((x=0;x<${#keyarry[*]};x++))
				do
					key="${keyarry[$x]}"
					if is_sub "${section}" "${ARRAY_GLOBAL_SECTION[*]}"; then
						restore_mole_single_config "${OLD_MOLE_CONF}" "${section}" "${key}" "1"
					elif [[ "${section}" =~ ${INNER_BEGIN} ]]; then
						restore_mole_single_config "${OLD_MOLE_CONF}" "${section}" "${key}" "1"
					else
						plugin_config_file="${OLD_ESOP_SAVEDIR}/conf/${section}.ini"
						if [ -f "${plugin_config_file}" ] && [ -s "${plugin_config_file}" ]; then
							restore_mole_single_config "${plugin_config_file}" "${section}" "${key}" "1"
						else
							((upgrade_note++))
							write_log -f "${UPGRADE_LOG}" "[NOTICE] previous rpmsave plugin config ${section}.ini not prepared!"
						fi
					fi
				done
			fi
		done
	else
		write_log -f "${UPGRADE_LOG}" "[ERROR] previous esop rpmsave mole config file not prepared!"
		return 1
	fi
}

restore_mole_opt_files() {
	if [ -f "${OLD_MOLE_CONF}" ] && [ -s "${OLD_MOLE_CONF}" ]; then
		local default_mailrec=$(read_mole_config -f "${OLD_MOLE_CONF}" "default" "mail_receviers")
		if [ "${default_mailrec}" == "file:opt/receviers.lst" ]; then
			if [ -f "${OLD_ESOP_SAVEDIR}/opt/receviers.lst" ]; then
				local rc= errstr=
				errstr=$( /bin/cp -f "${OLD_ESOP_SAVEDIR}/opt/receviers.lst" "${OPT_DIR}/receviers.lst" 2>&1 1>/dev/null )
				rc=$?
				if [ $rc -eq 0 ]; then	
					((upgrade_succ++))				
					write_log -f "${UPGRADE_LOG}"  "[SUCC] restore mole opt-file [opt/receviers.lst] (${rc})"
				else
					((upgrade_fail++))
					write_log -f "${UPGRADE_LOG}"  "[FAIL] restore mole opt-file [opt/receviers.lst] (${rc}) (${errstr})"
				fi
			else
				((upgrade_skip++))
				write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole opt-file [opt/receviers.lst], as previous backup not exists!"
			fi
		else
			((upgrade_skip++))
			write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole opt-file [opt/receviers.lst], as previous config = [${default_mailrec}]"
		fi

		local default_smsrec=$(read_mole_config -f "${OLD_MOLE_CONF}" "default" "sms_receviers")
		if [ "${default_smsrec}" == "file:opt/sms.lst" ]; then
			if [ -f "${OLD_ESOP_SAVEDIR}/opt/sms.lst" ]; then
				local rc= errstr=
				errstr=$( /bin/cp -f "${OLD_ESOP_SAVEDIR}/opt/sms.lst" "${OPT_DIR}/sms.lst" 2>&1 1>/dev/null )
				rc=$?
				if [ $rc -eq 0 ]; then	
					((upgrade_succ++))				
					write_log -f "${UPGRADE_LOG}"  "[SUCC] restore mole opt-file [opt/sms.lst] (${rc})"
				else
					((upgrade_fail++))
					write_log -f "${UPGRADE_LOG}"  "[FAIL] restore mole opt-file [opt/sms.lst] (${rc}) (${errstr})"
				fi
			else
				((upgrade_skip++))
				write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole opt-file [opt/sms.lst], as previous backup not exists!"
			fi
		else
			((upgrade_skip++))
			write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole opt-file [opt/sms.lst], as previous config = [${default_smsrec}]"
		fi
	fi
	
	if [ -f "${OLD_ESOP_SAVEDIR}/conf/process.ini" ] && [ -s "${OLD_ESOP_SAVEDIR}/conf/process.ini" ]; then
		local process_psfile=$(read_mole_config -f "${OLD_ESOP_SAVEDIR}/conf/process.ini" "process" "pslist_file")
		if [ "${process_psfile}" == "file:opt/process.lst" ]; then
			if [ -f "${OLD_ESOP_SAVEDIR}/opt/process.lst" ]; then
				local rc= errstr=
				errstr=$( /bin/cp -f "${OLD_ESOP_SAVEDIR}/opt/process.lst" "${OPT_DIR}/process.lst" 2>&1 1>/dev/null )
				rc=$?
				if [ $rc -eq 0 ]; then	
					((upgrade_succ++))				
					write_log -f "${UPGRADE_LOG}"  "[SUCC] restore mole opt-file [opt/process.lst] (${rc})"
				else
					((upgrade_fail++))
					write_log -f "${UPGRADE_LOG}"  "[FAIL] restore mole opt-file [opt/process.lst] (${rc}) (${errstr})"
				fi
			else
				((upgrade_skip++))
				write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole opt-file [opt/process.lst], as previous backup not exists!"
			fi
		else
			((upgrade_skip++))
			write_log -f "${UPGRADE_LOG}"  "[SKIP] restore mole opt-file [opt/process.lst], as previous config = [${process_psfile}]"
		fi
	fi
}

restore_proxy_all_config() {
	OLDSAVE_DIR="${OLD_ESOP_SAVEDIR}"
	NEWINST_DIR="/usr/local/esop/agent"
	local rc= errstr=
	local i=
	for ((i=0;i<${#ARRAY_OLD_PROXY_CONF[*]};i++))
	do
		src="${OLDSAVE_DIR}/${ARRAY_OLD_PROXY_CONF[$i]}"
		dst="${NEWINST_DIR}/${ARRAY_OLD_PROXY_CONF[$i]}"
		if [ -f "${src}" ]; then
			errstr=$( /bin/cp -f "${src}" "${dst}" 2>&1 1>/dev/null )
			rc=$?
			if [ $rc -eq 0 ]; then
				((upgrade_succ++))
				write_log -f "${UPGRADE_LOG}"  "[SUCC] restore proxy config [${ARRAY_OLD_PROXY_CONF[$i]}] (${rc})"
			else
				((upgrade_fail++))
				write_log -f "${UPGRADE_LOG}"  "[FAIL] restore proxy config [${ARRAY_OLD_PROXY_CONF[$i]}] (${rc}) (${errstr})"
			fi
		else
			((upgrade_skip++))
			write_log -f "${UPGRADE_LOG}"  "[SKIP] restore proxy config [${src}] not exists!"
		fi
	done
}


# Set Old Mole Config File Path


#
# Main Body Begin ...
#

write_log -f "${UPGRADE_LOG}" ''
write_log -f "${UPGRADE_LOG}" ''
write_log -f "${UPGRADE_LOG}" '[INFO] esop upgrade from 1.0.1 to 1.1.0 start.'

restore_mole_all_config
restore_mole_opt_files
restore_proxy_all_config


errstr=$(/bin/cp /dev/null "${OLD_ESOP_VERFILE}" 2>&1 1>/dev/null)
if [ $? -eq 0 ]; then
	write_log -f "${UPGRADE_LOG}"  "[INFO] empty upgrade tag file ${OLD_ESOP_VERFILE}"
else
	write_log -f "${UPGRADE_LOG}"  "[ERROR] empty upgrade tag file ${OLD_ESOP_VERFILE} [${errstr}]"
fi

write_log -f "${UPGRADE_LOG}"  "[INFO] esop upgrade from 1.0.1 to 1.1.0 finished. "\
					"[skip=${upgrade_skip}, succ=${upgrade_succ}, fail=${upgrade_fail}, note=${upgrade_note}]"
