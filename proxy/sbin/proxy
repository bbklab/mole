#!/usr/bin/perl

BEGIN {
	$| = 1;
}

use strict;
use warnings;
use POSIX;
use File::Spec::Functions qw(rel2abs);
use File::Basename qw(dirname);
use Time::HiRes qw(usleep);
use Socket;
use IO::Select;
use IO::Socket;
use IO::Socket::INET;
use IO::Socket::UNIX;
use Fcntl;
use Tie::RefHash;
# use Smart::Comments;

# Define Constant
use constant RCVBUFSIZE => POSIX::BUFSIZ * 2;
use constant PATH_BASE => dirname(dirname(rel2abs(__FILE__)));
use constant PATH_CONF => PATH_BASE . '/conf';
use constant PATH_LIB  => PATH_BASE . '/lib';
use constant PATH_LOG  => PATH_BASE . '/log';
use constant PATH_SBIN => PATH_BASE . '/sbin';
use constant PATH_TMP  => PATH_BASE . '/tmp';
use constant PATH_RUN  => PATH_BASE . '/run';
use constant PATH_TEST => PATH_BASE . '/t';
use constant CONFIG_FILENAME => 'proxy.ini';
use constant FILE_CONF => PATH_CONF . '/' . CONFIG_FILENAME;
use constant LOG_FILENAME => 'proxy.log';
use constant FILE_LOG  => PATH_LOG  . '/' . LOG_FILENAME;
use constant PID_FILENAME => 'proxy.pid';
use constant FILE_PID  => PATH_RUN  . '/' . PID_FILENAME;
use constant QSOCK_FILENAME => 'queue.sock';
use constant FILE_QSOCK => PATH_TMP . '/' . QSOCK_FILENAME;

# Use our module 
use lib PATH_LIB;
use EsopLib;

# Define Global Vars
our %Config = &load_configs;		# proxy config
our %Accept_Children = (); 		# current accept children, only used in parent process
our %Sender_Children = ();		# current sender children, only used in parent process
our %Queue_Children = ();		# current queue children, only used in parent process
our $debug = $Config{'debug'};
our $daemon = $Config{'daemon'};
### %Config

# Establish server socket, bind and listen.
our $listen_socket = IO::Socket::INET->new(
	LocalHost	=> $Config{'listen_addr'},
	LocalPort	=> $Config{'listen_port'},
	Proto		=> 'tcp',
	Type		=> SOCK_STREAM,
	Listen		=> SOMAXCONN,
	Resuse		=> 1,
);
unless (defined $listen_socket) {
	&log (FILE_LOG, "CRIT proxy create socket error: $@");
	exit (1);
}

# set socket as non-block
unless ( &nonblock($listen_socket) )  {
	&log (FILE_LOG, "CRIT proxy set listening socket non-blocking error: $@");
	exit (1);
}
&log (FILE_LOG, "INFO proxy listening on $Config{'listen_addr'}:$Config{'listen_port'}, ready for connection ...");


# Install Signal Handler: Child Reaper
$SIG{'CHLD'} = sub {
  # a non-blocking(WNOHANG) wait for all(-1) pending zombie processes.
  while((my $pid = waitpid(-1, WNOHANG)) >0) {
	if (exists $Accept_Children{$pid}) {
		my $runtime = time - $Accept_Children{$pid}{'starton'};
		&log (FILE_LOG,
		"INFO proxy reape accept child $pid, has been running for $runtime seconds");
		delete $Accept_Children{$pid};

	} elsif (exists $Sender_Children{$pid}) {
		my $runtime = time - $Sender_Children{$pid}{'starton'};
		&log (FILE_LOG,
		"INFO proxy reape sender child $pid, has been running for $runtime seconds");
		delete $Sender_Children{$pid};

	} elsif (exists $Queue_Children{$pid}) {
		my $runtime = time - $Queue_Children{$pid}{'starton'};
		&log (FILE_LOG,
		"INFO proxy reape queue child $pid, has been running for $runtime seconds");
		delete $Queue_Children{$pid};
	
	} else {
		&log (FILE_LOG,
		"NOTE proxy reape unknown child $pid, should be either accept or sender child");
	}
  }
};

# Install Signal Handler: Exit Clean
$SIG{'TERM'} = $SIG{'INT'} = sub {
	&log (FILE_LOG, "NOTE proxy caught signal TERM/INT, exiting..."); 
	local ($SIG{'CHLD'}) = 'IGNORE';
	kill 'TERM', keys %Accept_Children;
	kill 'TERM', keys %Sender_Children;
	kill 'TERM', keys %Queue_Children;
	unlink FILE_QSOCK if -S FILE_QSOCK;
	unlink FILE_PID if -s FILE_PID;
	&log (FILE_LOG, "NOTE proxy finished."); 
	exit (0);
};

# Install Signal Handler: Broken PIPE
$SIG{'PIPE'} = sub {		# log SIGPIPE and exit
	&log (FILE_LOG, "CRIT proxy caught signal PIPE, keep running...");
};


# Run as a Daemon
if ($daemon) {
	my $child = fork(); 
	unless (defined $child) {
		&log (FILE_LOG, "CRIT proxy fork failed, $!");
		exit (1);
	}

	# father exit
	if ($child) {
		exit (0);
	}
     
	# close STDIN/STDOUT/STDERR
	for my $handle (*STDIN, *STDOUT, *STDERR) {
		unless ( open ($handle, "+<", "/dev/null") ) {
			&log (FILE_LOG, "CRIT proxy reopen $handle to /dev/null error: $!");
			die "$!\n";
		}
	}
 
	# child become leader
	POSIX::setsid() ||  die "$!\n";

	# chaning into /
	chdir '/' || die "$!\n";

	# set umask
	umask(022) || die "$!\n";

	# set ENV
	$ENV{'PATH'} = '/sbin:/bin:/usr/sbin:/usr/bin';
 
	# save daemon pid
	unless ( open (FPID,">",FILE_PID) ) {
		&log (FILE_LOG, "CRIT proxy save daemon pid failed, $!");
		die "$!\n";
	}
	unless (print FPID $$) {
		&log (FILE_LOG, "CRIT proxy save daemon pid failed, $!");
		die "$!\n";
	}
	close FPID;
	&log (FILE_LOG, "INFO proxy daemon $$ running ...");
}


# On Startup Initial
# Fork Off Our Queue -> Sender -> Accept Children
# start only one queue child
&make_new_queue_child;
die "$@\n" if ($@);

# start only one sender child
usleep (100000);
&make_new_sender_child;
die "$@\n" if ($@);

# start serveral accept children
for (1 .. $Config{'start_child'}) {
	&make_new_accept_child;
}
die "$@\n" if ($@);

# Main Daemon LOOP
while (1) {

	# maintain children population
	unless (scalar keys %Queue_Children) {
		&make_new_queue_child;
	}
	unless (scalar keys %Sender_Children)  {
		&make_new_sender_child;
	}
	for (my $i = scalar keys %Accept_Children; $i < $Config{'start_child'}; $i++) {
		&make_new_accept_child;
	}

	# wait for a signal (i.e., child's death SIGCHLD will wake up it)
	sleep;
}




#
# Sub Definations
#

sub make_new_accept_child {
	# block signal for fork
	my $sigset = POSIX::SigSet->new(SIGHUP,SIGINT,SIGTERM,SIGCHLD);
	POSIX::sigprocmask(SIG_BLOCK, $sigset);

	# fork off a child, parent return none-zero, child return zero
	my $pid = fork;

	# Trouble
	if (not defined $pid ){
		&log (FILE_LOG, "CRIT accept child fork failed: $!");
		return undef;

	# Parent
	} elsif ($pid) {
		# unblock signal
		POSIX::sigprocmask(SIG_UNBLOCK, $sigset);

		# records the child's birth and return.
		&log (FILE_LOG, "INFO accept child $pid starting");
		$Accept_Children{$pid}{'starton'} = time; 
		return 1;
	} 

	# Child
	# this is child process, pls do *NOT* return from this subroutine.
	# must do exit instead of return. If it does, the child will return become a parent, 
	# and spawn off its own children. Your system will fill up with processes util death.

	my $child_pid = $$;

	$SIG{'HUP'} = $SIG{'INT'} = $SIG{'TERM'} = $SIG{'CHLD'} = 'DEFAULT'; 
	POSIX::sigprocmask(SIG_UNBLOCK, $sigset);

	$SIG{'PIPE'} = sub {		# log SIGPIPE and exit
		&log (FILE_LOG,
		"CRIT accept child $child_pid caught SIGPIPE, exit");
		exit (1);
	};
	
	my $i = 1;		# served request counter
	my $handle;
	my $inbuffer;
	my $rv;
	my $deadend = 0;	# if set {deadend}, means this accept child have finished its job, 
				# and it will **NOT** accept any new connection util exit.

	my %client_inbuffer = ();
	my %client_outbuffer = ();
	my %client_ready = ();
	my %client_other = ();

	tie %client_ready, 'Tie::RefHash';

	my $select = IO::Select->new( $listen_socket );


	while (1) {

		my $header;
		my $data;
		my $datalength;

		if ($deadend) {
			$select->remove( $listen_socket );		# do **NOT** accept new session
		}

		# accept connect or read socket data
		foreach $handle ( $select->can_read(1) ) {
			### found_readable_fd: $handle

			my $childinfo;
			my $cinfo;

			if ($handle eq $listen_socket) {

				### accetp_child_got_new_client: $child_pid

				# this is new connect, set {childinfo} with new counter {i}
				$childinfo = "$child_pid-($i)";		

				# if new connect, set {cdetail} with new connect
				my ($sockdata,$client) = (undef, undef);
				unless ( ($sockdata, $client) = $handle->accept() ) {		# SKIP Thundering Herd
					&log (FILE_LOG,
					"NOTE accept child $childinfo maybe Thundering Herd, SKIP") if $debug;
					next;
				}

				my ($client_port,$client_ip) = sockaddr_in ($client);
				my $client_ipaddr = inet_ntoa ($client_ip);
				$cinfo = $client_ipaddr . ':' . $client_port;
				unless (&is_sub ($client_ipaddr, @{$Config{'src_allow'}})) {
					$sockdata->close();	# directly close connection
					&log (FILE_LOG,
					"NOTE accept child $childinfo deny connection, client $cinfo");
					next;
				}
				$sockdata->autoflush(1);	# autoflush is must for server after accept()
				$sockdata->send( "+OK ready\r\n" );
				unless ( $select->add($sockdata) ) {
					&log (FILE_LOG,
					"CRIT accept child $childinfo failed SELECT-ADD connection, client $cinfo");
					next;
				}
				unless ( &nonblock($sockdata) ) {
					&log (FILE_LOG,
					"CRIT accept child $childinfo failed NON-BLOCK connection, client $cinfo");
					next;
				}
				$client_other{$sockdata}{'processor'} = $childinfo;	# save session processor
				$client_other{$sockdata}{'client'}    = $cinfo;		# save session client
				$client_other{$sockdata}{'starton'}   = time;		# save session start time
				&log (FILE_LOG,
				"INFO accept child $childinfo accept connection, client [$cinfo]");
				$i ++;
				next;
			} 

			# this is old connect, set {childinfo} as previous saved
			$childinfo = $client_other{$handle}{'processor'};
			# this is old connect, set {cdetail} as previous saved
			$cinfo = $client_other{$handle}{'client'};

			### process_timeout_session_socket
			if (exists $client_other{$handle}{'starton'}) { 
				my $session_duration = time - $client_other{$handle}{'starton'};
				### $session_duration
				if ( $session_duration >= $Config{'accept_timeout'} ) {
					&log (FILE_LOG,
					"NOTE accept child $childinfo close timeout connection, client $cinfo");
					goto READERR_END;
				}
			}

			### read_socket_data

			$inbuffer = '';
			$rv = $handle->recv($inbuffer, RCVBUFSIZE, 0);
			unless ( defined $rv ) {
				### recv_error
				goto READERR_END;
			}
			unless ( length $inbuffer ) {
				### recv_0_byte_maybe_client_closed
				goto READERR_END;
			}

			$client_inbuffer{$handle} .= $inbuffer;
			### recv_success: $inbuffer
			### %client_inbuffer

			my $inbuffer_length = length $client_inbuffer{$handle};
			if ( $inbuffer_length > $Config{'maxlen_accept'} ) {
				$handle->send( "-ERR message too long\r\n", 0 );
				&log (FILE_LOG,
				"CRIT accept child $childinfo receive message length [$inbuffer_length] exceed, client [$cinfo]");
				goto READERR_END;
			}

			if ($client_inbuffer{$handle} =~ m/(.*)\r\n/) {
				### receive_whole_line: $1
				push @{$client_ready{$handle}{'request'}}, $1;
				delete $client_inbuffer{$handle};
				next;
			}

			next;		# this is **IMPORTANT** , go for next recv
					# especially for data larger than RCVBUFSIZE

			READERR_END: {
				### got_into_readerr_end_close_myself_socket
				delete $client_inbuffer{$handle} if exists $client_inbuffer{$handle};
				delete $client_outbuffer{$handle} if exists $client_outbuffer{$handle};
				delete $client_ready{$handle} if exists $client_ready{$handle};
				delete $client_other{$handle} if exists $client_other{$handle};
				$select->remove($handle);	# remove first and then close, otherwise select() will lead to 100% CPU
				$handle->close();
				next;
			}
		}

		# process all full-line request saved in %client_ready
		# and write response to {output_buffer}
		foreach $handle (keys %client_ready) {

			# this is old connect, set {childinfo} as previous saved
			my $childinfo = $client_other{$handle}{'processor'};
			# this is old connect, set {cdetail} as previous saved
			my $cinfo = $client_other{$handle}{'client'};

			if ( scalar @{$client_ready{$handle}{'request'}} eq 1 ) {
				if ( $client_ready{$handle}{'processing'} )  {
					next;			# do **NOT** write to {output_buffer} repeatly
				}
				if ( $client_ready{$handle}{'request'}[0] =~ m/\AHEAD\s+(\w+,\S+,\S+)\Z/i ) {
					$header = $1;
					&log (FILE_LOG,
					"DEBUG accept child $childinfo receive header [$header], client [$cinfo]") if $debug;
					$client_outbuffer{$handle} = "+OK recorded\r\n";
					$client_ready{$handle}{'processing'} = 1;	# mark as processing
					next;						# do **NOT** delete myself
				} else {
					$client_outbuffer{$handle} = "-ERR HEAD message first\r\n";
					$client_ready{$handle}{'processing'} = 0;	# mark as finished
				}

			} elsif ( scalar @{$client_ready{$handle}{'request'}} eq 2 ) {
				if ( $client_ready{$handle}{'request'}[0] =~ m/\AHEAD\s+(\w+,\S+,\S+)\Z/i ) {
					$header = $1;
					$data = $client_ready{$handle}{'request'}[1];
					$datalength = length $data;
					&log (FILE_LOG,
					"INFO accept child $childinfo receive data length [$datalength], client [$cinfo], header [$header]");
					&log (FILE_LOG,
					"DEBUG accept child $childinfo receive data [$data], client [$cinfo], header [$header]") if $debug;
					if (!$datalength) {
						&log (FILE_LOG,
						"NOTE accept child $childinfo received empty data, client [$cinfo], header [$header]");
						$client_outbuffer{$handle} = "-ERR empty data\r\n";
					} elsif ( &write_queue($childinfo, $header, $data) ) {
						&log (FILE_LOG,
						"INFO accept child $childinfo write data into queue succeed, client [$cinfo], header [$header]");
						$client_outbuffer{$handle} = "+OK accepted\r\n";
					} else {
						&log (FILE_LOG,
						"CRIT accept child $childinfo write data into queue failed, client [$cinfo], header [$header]");
						$client_outbuffer{$handle} = "-ERR write queue fail\r\n";
					}
					$client_ready{$handle}{'processing'} = 0;	# mark as finished
				} else {
					$client_outbuffer{$handle} = "-ERR HEAD message first\r\n";
					$client_ready{$handle}{'processing'} = 0;	# mark as finished
				}

			} else { 
				&log (FILE_LOG,
				"NOTE accept child $childinfo more than two requests found, client [$cinfo], header [$header]");
				delete $client_ready{$handle};
			}
		}

		# response to client
		foreach $handle ( $select->can_write(1) ) {

			### found_writable_fd: $handle

			# this is old connect, set {childinfo} as previous saved
			my $childinfo = $client_other{$handle}{'processor'};
			# this is old connect, set {cdetail} as previous saved
			my $cinfo = $client_other{$handle}{'client'};

			### process_timeout_session_socket
			if (exists $client_other{$handle}{'starton'}) { 
				my $session_duration = time - $client_other{$handle}{'starton'};
				### $session_duration
				if ( $session_duration >= $Config{'accept_timeout'} ) {
					&log (FILE_LOG,
					"NOTE accept child $childinfo close timeout connection, client $cinfo");
					goto WRITEERR_END;
				}
			}

			### hash_prepared_to_output: %client_outbuffer
			unless ( exists $client_outbuffer{$handle} ) {
				next;		# SKIP session which not prepared to response
			}

			$rv = $handle->send( $client_outbuffer{$handle}, 0 );
			unless ( defined $rv ) {
				# send_error_1
				goto WRITEERR_END;
			}
			unless ( $rv eq length $client_outbuffer{$handle}
				|| $! eq POSIX::EWOULDBLOCK ) {
				# send_error_2
				goto WRITEERR_END;
			}

			substr( $client_outbuffer{$handle}, 0, $rv ) = '';	

			unless ( length $client_outbuffer{$handle} ) {
				delete $client_outbuffer{$handle};
				if ( $client_ready{$handle}{'processing'} ) {
					### interactive_not_finished_wait_for_next_output
					next;
				} else {
					### interactive_finished_close_myself
					goto WRITEERR_END;
				}
			}

			next;		# this is **IMPORTANT** , go for next send 

			WRITEERR_END: {
				delete $client_inbuffer{$handle} if exists $client_inbuffer{$handle};
				delete $client_outbuffer{$handle} if exists $client_outbuffer{$handle};
				delete $client_ready{$handle} if exists $client_ready{$handle};
				delete $client_other{$handle} if exists $client_other{$handle};
				$select->remove($handle);	# remove first and then close, otherwise select() will lead to 100% CPU
				$handle->close();
				next;
			}
		}

		# exit loop on reached maxrequest_perchild
		if ( $i > $Config{'maxrequest_perchild'} ) {
			$deadend = 1;
			my @fdset = $select->handles;
			if ( scalar @fdset ) {
				next;		# wait for all fd processed
			} else {
				last;		# exit only on all fd processed
			}
		}
	}

	# tidy up gracefully and finish

	# this exit is VERY important, otherwise the child will become
	# a parent producer of more and more children, forking util death.
	&log (FILE_LOG,
	"INFO accept child $child_pid finish its job, will exit");
	exit (0);
}

sub make_new_sender_child {
	# block signal for fork
	my $sigset = POSIX::SigSet->new(SIGHUP,SIGINT,SIGTERM,SIGCHLD);
	POSIX::sigprocmask(SIG_BLOCK, $sigset);

	# fork off a child, parent return none-zero, child return zero
	my $pid = fork;

	# Trouble
	if (not defined $pid ){
		&log (FILE_LOG, "CRIT sender child fork failed: $!");
		return undef;

	# Parent
	} elsif ($pid) {
		# unblock signal
		POSIX::sigprocmask(SIG_UNBLOCK, $sigset);

		# records the child's birth and return.
		&log (FILE_LOG, "INFO sender child $pid starting");
		$Sender_Children{$pid}{'starton'} = time; 
		return 1;
	} 

	# Child
	# this is child process, pls do *NOT* return from this subroutine.
	# must do exit instead of return. If it does, the child will return become a parent, 
	# and spawn off its own children. Your system will fill up with processes util death.

	my $child_pid = $$;

	$SIG{'HUP'} = $SIG{'INT'} = $SIG{'TERM'} = $SIG{'CHLD'} = 'DEFAULT'; 
	POSIX::sigprocmask(SIG_UNBLOCK, $sigset);

	$SIG{'PIPE'} = sub {		# log SIGPIPE and exit
		&log (FILE_LOG,
		"CRIT sender child $child_pid caught SIGPIPE, exit");
		exit (1);
	};

	while (1) {

		# read queue
		$_ = &read_queue($child_pid);

		# remove \r\n
		if (defined) {
			chomp; s/[\r\n]//g;
		}

		# sleep for a while if empty queue or failed
		unless (defined && length >0) {
			&log (FILE_LOG,
			"DEBUG sender child $child_pid SHIFT nothing from queue, sleep and try again.") if $debug;
			sleep (3);		# prevent from nonstop connecting (for example, delete socket)
			next;
		}
		&log (FILE_LOG,
		"DEBUG sender child $child_pid SHIFT message from queue succeed.") if $debug;

		&log (FILE_LOG,
		"DEBUG sender child $child_pid SHIFT message [$_]") if $debug;

		# split data
		unless (m/\A(\S+?) (.+)\Z/) {
			&log (FILE_LOG,
			"NOTE sender child $child_pid read misform message from queue, SKIP");
			next;		# skip misform data
		}

		my ($header, $data) = ($1, $2);
		my $data_length = length $data;
		&log (FILE_LOG,
		"INFO sender child $child_pid read message (length=$data_length) from queue. header [$header]");

		eval {
			local $SIG{'ALRM'} = sub { die 'Send Timed Out'; };
			alarm($Config{'sender_timeout'});
		
			my $dest_detail = "$Config{'dest_addr'}:$Config{'dest_port'}";
			my $post_connect = IO::Socket::INET->new(
				PeerAddr		=>  $Config{'dest_addr'},
				PeerPort		=>  $Config{'dest_port'},
				Proto			=>  'tcp',
			);
			unless (defined $post_connect) {
				&log (FILE_LOG,
				"CRIT sender child $child_pid connect $dest_detail failed [$@]. header [$header]");
				die 'connect dest failed';
			}
			&log (FILE_LOG,
			"DEBUG sender child $child_pid connect $dest_detail succeed. header [$header] ") if $debug;

			my $rv = $post_connect->send( "$data\r\n", 0 );
	
			unless (defined $rv) {
				&log (FILE_LOG,
				"CRIT sender child $child_pid send data to remote host failed. header [$header]");
				die 'send data failed';
			}

			$rv -= 2;
			unless ( $rv eq $data_length ) {
				&log (FILE_LOG,
				"CRIT sender child $child_pid send half data (length=$rv) to remote host. header [$header]");
				die 'send half data';
			}

			&log (FILE_LOG,
			"INFO sender child $child_pid send (length=$rv) data to remote host succeed. header [$header]");

			my $response = <$post_connect> if ($post_connect);
			if (defined $response && length $response) {
				chomp $response;
				&log (FILE_LOG,
				"DEBUG sender child $child_pid receive response from remote host [$response]. header [$header]") if $debug;
				if ($response =~ /\A(\d)\s+(\d+)\Z/) {
					my ($flag,$rcvlen) = ($1,$2);
					if ($flag eq 0) {
						if ($rcvlen eq $data_length) {
							&log (FILE_LOG,
							"INFO sender child $child_pid receive fulldata (length=$rcvlen) response from remote host. header [$header]");
						} else {
							&log (FILE_LOG,
							"CRIT sender child $child_pid receive halfdata (length=$rcvlen) response from remote host. header [$header]");
						}
					} else {
						&log (FILE_LOG,
						"CRIT sender child $child_pid receive failed response from remote host [$response]. header [$header]");
					}
				} else {
					&log (FILE_LOG,
					"CRIT sender child $child_pid receive unrecognized response from remote host [$response]. header [$header]");
				}
			} else {
				&log (FILE_LOG,
				"CRIT sender child $child_pid didn't receive any response from remote host. header [$header]");
			}

			$post_connect->close() if ($post_connect);

			alarm(0);
		};
		alarm(0);

		if ($@) {
			if ($@ =~ m/Send Timed Out/) {
				&log (FILE_LOG,
				"CRIT sender child $child_pid send data timeout. header [$header]");
			} else {
				$@ =~ s/[\r\n]//g;
				&log (FILE_LOG,
				"CRIT sender child $child_pid send data error [$@]. header [$header]");
			}
		}
	}

	# tidy up gracefully and finish

	# this exit is VERY important, otherwise the child will become
	# a parent producer of more and more children, forking util death.
	&log (FILE_LOG,
	"NOTE sender child $child_pid finish its loop, exit");
	exit (0);
}

sub make_new_queue_child {
	# block signal for fork
	my $sigset = POSIX::SigSet->new(SIGHUP,SIGINT,SIGTERM,SIGCHLD);
	POSIX::sigprocmask(SIG_BLOCK, $sigset);

	# fork off a child, parent return none-zero, child return zero
	my $pid = fork;

	# Trouble
	if (not defined $pid ){
		&log (FILE_LOG, "CRIT queue child fork failed: $!");
		return undef;

	# Parent
	} elsif ($pid) {
		# unblock signal
		POSIX::sigprocmask(SIG_UNBLOCK, $sigset);

		# records the child's birth and return.
		&log (FILE_LOG, "INFO queue child $pid starting");
		$Queue_Children{$pid}{'starton'} = time; 
		return 1;
	} 

	# Child
	# this is child process, pls do *NOT* return from this subroutine.
	# must do exit instead of return. If it does, the child will return become a parent, 
	# and spawn off its own children. Your system will fill up with processes util death.

	my $child_pid = $$;

	$SIG{'HUP'} = $SIG{'INT'} = $SIG{'TERM'} = $SIG{'CHLD'} = 'DEFAULT'; 
	POSIX::sigprocmask(SIG_UNBLOCK, $sigset);

	$SIG{'PIPE'} = sub {		# log SIGPIPE and exit
		&log (FILE_LOG,
		"CRIT queue child $child_pid caught SIGPIPE, exit");
		exit (1);
	};

	my @queue_data = ();  	# initial data queue
	umask (0117);		# set umask for rw-------

	# create unix domain socket	
	unlink FILE_QSOCK if -S FILE_QSOCK;
	my $unix_socket = IO::Socket::UNIX->new(
		Local		=> FILE_QSOCK,
		Listen          => SOMAXCONN,
		Type		=> SOCK_STREAM,
	);
	unless (defined $unix_socket) {
		&log (FILE_LOG, "CRIT queue child $child_pid create unix domain socket error: [$!]");
		sleep (3);		# prevent from nonstop restarting
		exit (1);
	}
	&log (FILE_LOG, "INFO queue child $child_pid listening on unix domain socket ...");

	while (1) {

		# accept request
	 	my $sockdata = $unix_socket->accept();
		
		# read request
		$_ = <$sockdata> if ($sockdata);

		# remove \r\n
		if (defined) {
			chomp; s/[\r\n]//g;
		}

		# skip if empty request or read request failed
		unless (defined && length >0) {
			&log (FILE_LOG,
			"CRIT queue child $child_pid skip empty request.") if $debug;
                       	goto CONNEND;
		}   
		&log (FILE_LOG,
		"DEBUG queue child $child_pid accept request $_") if $debug;

		# process PUSH
		if (m/\APUSH (.+)\Z/) {
			my $data = $1;
			my $queue_number = scalar @queue_data;
			if ($queue_number > $Config{'queue_maxlen'}) {
				&log (FILE_LOG,
				"NOTE queue child $child_pid queue number $queue_number reached uplimit, auto SHIFT");
				my $oldest = shift @queue_data;
				if ($oldest =~ m/\A(\S+?) (.+)\Z/) {
					&log (FILE_LOG,
					"NOTE queue child $child_pid remove oldest data, header [$1]");
				} else {
					&log (FILE_LOG,
					"NOTE queue child $child_pid remove oldest data, header unknown");
				}
			} 
			push @queue_data, $data;

		# process SHIFT
		} elsif (m/\ASHIFT\Z/) {
			unless (scalar @queue_data > 0) {
				&log (FILE_LOG,
				"DEBUG queue child $child_pid has empty queue, return nothing") if $debug;
				goto CONNEND;
			}
			unless (print $sockdata (shift @queue_data) . "\r\n") {
				&log (FILE_LOG,
				"CRIT queue child $child_pid return first data in queue failed");
				goto CONNEND;
			}
			&log (FILE_LOG,
			"DEBUG queue child $child_pid return first data in queue succeed") if $debug;

		# ignore other
		} else {
			goto CONNEND;
		}

		CONNEND: {
			$sockdata->close() if ($sockdata);
			next;
		}
	}

	# tidy up gracefully and finish
	$unix_socket->close() if ($unix_socket);
	unlink FILE_QSOCK if -S FILE_QSOCK;

	# this exit is VERY important, otherwise the child will become
	# a parent producer of more and more children, forking util death.
	&log (FILE_LOG,
	"NOTE queue child $child_pid finish its loop, exit");
	exit (0);
}


sub load_configs {
	my %Result_Config = ();

	my %Config = (
		'debug'				=> 	['global','debug',0],
		'daemon'			=> 	['global','daemon',1],
		'listen_addr'			=> 	['accept','listen_addr','0.0.0.0'],
		'listen_port'			=> 	['accept','listen_port',8548],
		'src_allow'			=>	['accept','src_allow','127.0.0.1'],
		'maxlen_accept'			=>	['accept','maxlen_accept',131072],
		'start_child'			=>	['accept','start_child',5],
		'maxrequest_perchild'		=>	['accept','maxrequest_perchild',2000],
		'accept_timeout'		=>	['accept','accept_timeout',10],
		'queue_maxlen'                  =>      ['queue','queue_maxlen',1000],
		'dest_addr'			=>	['sender','dest_addr','mole.eyousop.com'],
		'dest_port'			=>	['sender','dest_port',8538],
		'sender_timeout'		=>	['sender','sender_timeout',30],
	);

	# load proxy ini configs
	foreach my $config (keys %Config) {
		my ($section,$key,$default) = @{$Config{$config}};
		my ($value, $error) = &read_ini($section,$key,FILE_CONF);
		if (defined $value) {
			$Result_Config{$config} = $value;
			&log (FILE_LOG, "INFO load config $config = $value");
		} else {
			&log (FILE_LOG, "NOTE load config $config error: [$error], load default ($default)");
			$Result_Config{$config} = $default;
		}
	}

	if ($Result_Config{'src_allow'} =~ s/\A\s*file://gi) {
		$Result_Config{'src_allow'} = [ &read_fitem($Result_Config{'src_allow'},PATH_BASE,'#') ];
	} else {
		$Result_Config{'src_allow'} = [ split(/\s*,\s*/, $Result_Config{'src_allow'}) ];		# use anoymous array ref
	}

	unless (scalar @{$Result_Config{'src_allow'}}) {
		my ($section,$key,$default) = @{$Config{'src_allow'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'src_allow'} = $default;
	}

	if ($Result_Config{'debug'} ne 0 && $Result_Config{'debug'} ne 1) {
		my ($section,$key,$default) = @{$Config{'debug'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'debug'} = [ $default ];
	}

	if ($Result_Config{'daemon'} ne 0 && $Result_Config{'daemon'} ne 1) {
		my ($section,$key,$default) = @{$Config{'daemon'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'daemon'} = $default;
	}

	if ($Result_Config{'listen_port'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'listen_port'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'listen_port'} = $default;
	}

	if ($Result_Config{'maxlen_accept'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'maxlen_accept'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'maxlen_accept'} = $default;
	}

	if ($Result_Config{'start_child'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'start_child'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'start_child'} = $default;
	}

	if ($Result_Config{'maxrequest_perchild'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'maxrequest_perchild'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'maxrequest_perchild'} = $default;
	}

	if ($Result_Config{'accept_timeout'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'accept_timeout'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'accept_timeout'} = $default;
	}

	if ($Result_Config{'queue_maxlen'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'queue_maxlen'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'queue_maxlen'} = $default;
	}

	if ($Result_Config{'dest_port'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'dest_port'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'dest_port'} = $default;
	}

	if ($Result_Config{'sender_timeout'} =~ m/\D/) {
		my ($section,$key,$default) = @{$Config{'sender_timeout'}};
		&log (FILE_LOG, "NOTE load config [$section-$key] misform, load default ($default)");
		$Result_Config{'sender_timeout'} = $default;
	}

	return %Result_Config;
}

sub write_queue {

	my ($child, $header, $data) = @_;
	
	unless (defined $child && length $child) {
		$child = 'Null-(N/A)';
	}

	unless (defined $data && length $data) {
		&log(FILE_LOG,
		"CRIT accept child $child write queue error: data not defined");
		return undef;
	}

	unless (defined $header && length $header) {
		&log(FILE_LOG,
		"CRIT accept child $child write queue error: header not defined");
		return undef;
	}

	my $unix_socket = IO::Socket::UNIX->new(
		Type		=> SOCK_STREAM,
		Peer		=> FILE_QSOCK,
	);
	unless ($unix_socket) {
		&log(FILE_LOG,
		"CRIT accept child $child connect unix domain socket error [$@]");
		return undef;
	}
	&log (FILE_LOG,
		"DEBUG accept child $child connect unix domain socket succeed.") if $debug;

	unless (print $unix_socket "PUSH $header $data\r\n") {
		&log (FILE_LOG,
		"CRIT accept child $child write message into queue failed.");
		return undef;
	}

	$unix_socket->close() if ($unix_socket);

	1;
}

sub read_queue {

	my ( $child )  = @_;
	my $data = undef;

	unless (defined $child && length $child) {
		$child = 'Null-(N/A)';
	}

	my $unix_socket = IO::Socket::UNIX->new(
		Type            => SOCK_STREAM,
		Peer            => FILE_QSOCK,
	);
	unless ($unix_socket) {
		&log(FILE_LOG,
		"CRIT sender child $child connect unix domain socket error [$@].");
		return undef;
	}
	&log (FILE_LOG,
		"DEBUG sender child $child connect unix domain socket succeed.") if $debug;

	unless (print $unix_socket "SHIFT\r\n") {
		&log (FILE_LOG,
		"CRIT sender child $child request SHIFT message from queue failed.");
		return undef;
	}

	$data = <$unix_socket> if ($unix_socket);

	$unix_socket->close() if ($unix_socket);

	return $data;
}


sub nonblock {
	my $socket = shift;
	my $flags;
	
	$flags = fcntl($socket, F_GETFL, 0) 
		or die "get flags for socket error: $!";

	fcntl($socket, F_SETFL, $flags | O_NONBLOCK)
		or die "set socket non-blocking error: $!";
}

__END__
