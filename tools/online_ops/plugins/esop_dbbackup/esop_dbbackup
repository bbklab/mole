#!/usr/bin/env bash


# BASE_DIR DEF
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}

# === LOAD GETTEXT.SH FILE
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo -en "{unkn}:{str}:{load [/usr/bin/gettext.sh] failed with status $rc}"
                exit 3
        }   
else
        echo -en "{unkn}:{str}:{[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit}"
        exit 3
fi

# === LOAD INCLUDE FILE
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&- 
else    
        echo -en "{unkn}:{str}:{include file not exists or empty}"
        exit 3
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="esop_dbbackup"
else    
        echo -en "{unkn}:{str}:{locale directory [${LOCALE_DIR}] not exist or accessable, exit}"
        exit 3
fi


# === SET GLOBAL LOCALE
glocale=$(get_locale esop_dbbackup)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi


show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {}

Usage:  

Output:

EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_SUCC=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3
STATE_NOOP=4
STATE_NOTIFY=5

# Set Default
EXIT_STATUS=0
LEVEL=""        ### { ok | warn | crit | unkn | noop | notify }
TYPE=""         ### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
backup_savedir=$(read_mole_config esop_dbbackup backup_savedir)

# for mysqldump
mysqldump_path=$(read_mole_config esop_dbbackup mysqldump_path)
mysql_conn_conf=$(read_mole_config esop_dbbackup mysql_conn_conf)
# for innobackupex
innobackupex_path=$(read_mole_config esop_dbbackup innobackupex_path)
mysqlconf_path=$(read_mole_config esop_dbbackup mysqlconf_path)
backupex_tbfile=$(read_mole_config esop_dbbackup backupex_tbfile)

if [ -f "/${backupex_tbfile##*file:}" ]; then
	backupex_tbfile="/${backupex_tbfile##*file:}"
elif [ -f "${BASE_DIR}/${backupex_tbfile##*file:}" ]; then
	backupex_tbfile="${BASE_DIR}/${backupex_tbfile##*file:}"
fi 


# if null or invalid set default.

# check function here
check() {

  [ -z "${backup_savedir}" ] && {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(gettext "backup_savedir: not defined.")"
        return
  }

  [ -z "${mysqldump_path}" ] && {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
	CONTENT="$(gettext "mysqldump_path: not defined.")"
        return
  }

  [ -z "${innobackupex_path}" ] && {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
	CONTENT="$(gettext "innobackupex_path: not defined.")"
        return
  }
  
  [ -z "${mysqlconf_path}" ] && {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
	CONTENT="$(gettext "mysqlconf_path: not defined.")"
        return
  }

  [ -z "${backupex_tbfile}" ] && {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
	CONTENT="$(gettext "backupex_tbfile: not defined.")"
        return
  }

  [ -f "${mysqldump_path}" -a -x "${mysqldump_path}" ] || {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "utitile [\${mysqldump_path}] not prepared.")"
        return
  }

  [ -f "${innobackupex_path}" -a -x "${innobackupex_path}" ] || {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "utitile [\${innobackupex_path}] not prepared.")"
        return
  }

  [ -f "${mysqlconf_path}" -a -s "${mysqlconf_path}" ] || {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "file [\${mysqlconf_path}] not exist or empty.")"
        return
  }

  [ -f "${backupex_tbfile}" ] || {
        EXIT_STATUS=${STATE_UNKN};
        LEVEL="unkn";
        TYPE="str";
        CONTENT="$(eval_gettext "file [\${backupex_tbfile}] not exist.")"
        return
  }

  [ -d "${backup_savedir}" -a -w "${backup_savedir}" ] || {
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(eval_gettext "directory: [\${backup_savedir}] not exist or accessable")"
	return
  }

  sepnum=$(echo -e "${mysql_conn_conf}" | awk -F"," 'END{print --NF}')
  [ "${sepnum}" == "3" ] || {
	EXIT_STATUS=${STATE_UNKN}
	LEVEL="unkn"
	TYPE="str"
	CONTENT="$(eval_gettext "mysql_conn_conf: [\${mysql_conn_conf}] is invalid")"
	return
  }

  mysql_host="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $1}')"
  mysql_port="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $2}')"
  mysql_user="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $3}')"
  mysql_pass="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $4}')"

  local result=
  result="$(eval_gettext "database backup from mysql [\${mysql_host}:\${mysql_port}] with user [\${mysql_user}] by [\${mysqldump_path}]") ### ### "

  # mysqldump required: [select, lock tables] privileges at least
  if [ -z "${mysql_pass}" ]; then
	cmddump="${mysqldump_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -q --dump-date "
  else
	cmddump="${mysqldump_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -p"${mysql_pass}" -q --dump-date "
  fi  

  # innobackupex required: [reload, replication client] privileges at least
  cmdinnoex=" ${innobackupex_path} --defaults-file=${mysqlconf_path} --host=${mysql_host} --port=${mysql_port} --user=${mysql_user} --password=${mysql_pass} --tables-file=${backupex_tbfile}"

  dirpath="${backup_savedir}/$(date +%Y-%m-%d_%H-%M-%S)"
  innoex_dirpath="${dirpath}/innobackupex"
  errstr= rc=
  errstr=$( /bin/mkdir -p ${innoex_dirpath} 2>&1 1>/dev/null )
  rc=$?
  errstr=$( echo -e "${errstr}" | tr -d '\r\n' )
  if [ "${rc}" != 0 ]; then 
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "Esop Database BackUp CRITICAL") | $(gettext "create backup directory failed") | $(gettext "ERROR_INFO:") ### ${errstr} "
	return
  else
	result="${result} $(gettext "dump backup save directory:") ${dirpath} ### "
	result="${result} $(gettext "innobackupex backup save directory:") ${innoex_dirpath} ### ### "
  fi

  local errnum=0  succnum=0

  # 1. dump whole database: eyou_monitor, except table postlog
  local database="eyou_monitor"  ignore_table="postlog"
  local dump_args=" ${database} --ignore-table=${database}.${ignore_table} "
  local dstfilepath1="${dirpath}/${database}_online.no${ignore_table}.sql"
  errstuff1=$( ${cmddump} ${dump_args} 2>&1 1>"${dstfilepath1}" )
  if [ "$?" != "0" ]; then
	((errnum++))
	errstuff1=$(echo -e "${errstuff1}" | sed -e '/password on the command line/d' | tr -d '\r\n')
	result="${result} $(html_red "$(eval_gettext "Dump Backup Database [\${database}] (ignore: \${ignore_table}) return [\${errstuff1}]")") ###"
  else
	((succnum++))
	dt_size=$(/usr/bin/du -sk "${dstfilepath1}" 2>&- | awk '{print $1;exit;}')
	result="${result} $(eval_gettext "Dump Backup Database [\${database}] (ignore: \${ignore_table}) succeed. size=[\${dt_size}]K") ###"
  fi

  # 2. dump schema for table postlog
  local database="eyou_monitor"  table="postlog"
  local dump_args=" --opt -d ${database} ${table} "
  local dstfilepath2="${dirpath}/${database}_online.${table}.schema.sql"
  errstuff2=$( ${cmddump} ${dump_args} 2>&1 1>"${dstfilepath2}" )
  if [ "$?" != "0" ]; then
	((errnum++))
	errstuff2=$(echo -e "${errstuff2}" | sed -e '/password on the command line/d' | tr -d '\r\n')
	result="${result} $(html_red "$(eval_gettext "Dump Backup Table [\${table}] Schema return [\${errstuff2}]")") ###"
  else
	((succnum++))
	dt_size=$(/usr/bin/du -sk "${dstfilepath2}" 2>&- | awk '{print $1;exit;}')
	result="${result} $(eval_gettext "Dump Backup Table [\${table}] Schema succeed. size=[\${dt_size}]K") ###"
  fi

  # 3. innobackupex full backup on table postlog
  if [ ! -s "${backupex_tbfile}" ]; then
	result="${result} $(eval_gettext "InnoBackupex Backup Skip, as [\${backupex_tbfile}] is empty.") ### " 
  else
  	errstuff3=$( ${cmdinnoex} "${innoex_dirpath}" 2>&1 )
  	if [ "$?" != "0" ]; then
		((errnum++))
		errstuff3=$(echo -e "${errstuff3}" | sed -e '/password on the command line/d' | tr -d '\r\n')
		result="${result} $(html_red "$(eval_gettext "InnoBackupex Backup [\${backupex_tbfile}] return [\${errstuff3}]")") ###"
  	else
		((succnum++))
		dt_size=$(/usr/bin/du -sm "${innoex_dirpath}" 2>&- | awk '{print $1;exit;}')
		result="${result} $(eval_gettext "InnoBackupex Backup [\${backupex_tbfile}] succeed. size=[\${dt_size}]M") ###"
  	fi
  fi

  total=$((${succnum}+${errnum}))

  if [ "${errnum}" != "0" ]; then
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="crit";
	TYPE="str";
	CONTENT="$(gettext "Esop Database BackUp CRITICAL") | $(eval_gettext "\${errnum}/\${total} backup action failed.") | ${result} "
  else
	EXIT_STATUS=${STATE_SUCC};
  	LEVEL="succ";
  	TYPE="str";
	CONTENT="$(gettext "Esop Database BackUp OK") | $(eval_gettext "\${succnum}/\${total} backup action succeed.") | ${result} "
  fi
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
