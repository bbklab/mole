#!/bin/bash

export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"

# BASE DIR DEF
BASE_DIR=$( cd $(dirname $0) && pwd)

# INST DIR DEF 
INST_DIR="/usr/local/eyou/toolmail"

# SEP DEF
SEPERATOR="~~~"

# REQUIRED_UTILS DEF
REQUIRED_UTILS=(
	"/bin/cat"
        "/bin/awk"
        "/bin/sed"
	"/bin/cp"
	"/bin/rm"
	"/bin/mkdir"
        "/usr/bin/md5sum"
        "/usr/bin/tee"
	"/usr/bin/tr"
)
        
# UPDATE def
update_path="${BASE_DIR}/${updatename}"
update_back="${update_path}/pre-backup"
update_fcfg="${update_path}/update.cfg"
update_flog="${update_path}/update.log"

#### Function Def ####

# Print Help
# 
show_help() {
cat << EOF
Usage:          ./${0##*/}   	update_dirname  [workmode]
    workmode ~   print, check, backup, go
Example:        ./${0##*/}   	2014.6.17_hotfix_16320   print
Example:        ./${0##*/}   	2014.6.17_hotfix_16320   check
Example:        ./${0##*/}   	2014.6.17_hotfix_16320   go
EOF
exit 0
}

# Terminal color
#
echo_green() {
  local content=$*
  echo -e "\033[1;32m${content}\033[0m\c "
}
echo_yellow() {
  local content=$*
  echo -e "\033[1;33m${content}\033[0m\c "
}
echo_red() {
  local content=$*
  echo -e "\033[1;31m${content}\033[0m\c "
}

# Util Check
#
util_check() {
  local lacklst=
  for util in ${REQUIRED_UTILS[*]}; do
        if [ ! -f "${util}" ] || [ ! -x "${util}" ]; then
                lacklst="${lacklst} ${util}"
        fi
  done
  [ -n "${lacklst}" ] && echo -en "${lacklst}"
}

# Read INI File Section
# Usage		: read_ini {ini_file} {section}
# Example	: read_ini "${update_fcfg}" modify
#
read_ini() {
	local inifile="$1"  section="$2"
	/bin/cat "${inifile}" 2>&- | tr '\t' ' ' | /bin/awk '\
		($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next} \
		( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit} \
		(k==1 && x==1 && $0!~/^[ \t]*$/ && $0!~/^[ \t]*;/){print}' |\
	/bin/sed -e 's/^[ \t]*//; s/[ \t]*$//; s/^\"//; s/\"$//' 2>&-
}

# Write Log
# 
log() {
	echo "$(date +%s)" "$(date +%F_%T)" "${*}"  | /usr/bin/tee -a ${update_flog}
}

# Log Only
# 
_log() {
	echo "$(date +%s)" "$(date +%F_%T)" "${*}" >> ${update_flog}
}

# do add
do_add() {
	local src="$1"  dst="$2"
	/bin/cp -f "$src" "$dst" >> ${update_flog} 2>&1
	if [ "$?" == "0" ]; then
		log "$(echo_green "[OK]"): add [$src] to [$dst]"
	else
		log "$(echo_red "[ERROR]"): add [$src] to [$dst]"
		exit 1
	fi
}

# do replace
do_replace() {
	local src="$1"  dst="$2"
	/bin/cp -f "$src" "$dst" >> ${update_flog} 2>&1
	if [ "$?" == "0" ]; then
		log "$(echo_green "[OK]"): replace [$src] to [$dst]"
	else
		log "$(echo_red "[ERROR]"): replace [$src] to [$dst]"
		exit 1
	fi
}

# check md5sum
copy_check() {
	local src="$1"  dst="$2"
	local md51=$( /usr/bin/md5sum "$src" 2>&- | /bin/awk '{print $1}' )
	local md52=$( /usr/bin/md5sum "$dst" 2>&- | /bin/awk '{print $1}' )
	if [ "${md51}" == "${md52}" ]; then
		log "$(echo_green "[OK]"): copy check [$src] and [$dst] (${md51})"
	else
		log "$(echo_red "[ERROR]"): copy check [$src](${md51}) and [$dst](${md52})"
		exit 1
	fi
}

# update remove
do_remove() {
	local file="$1"
	/bin/rm -f "$file" >> ${update_flog} 2>&1
	if [ "$?" == "0" ]; then
		log "$(echo_green "[OK]"): remove [$file]"
	else
		log "$(echo_red "[ERROR]"): remove [$file]"
		exit 1
	fi
}

# check remove
remove_check() {
	local file="$1"
	if [ ! -e "$file" ]; then
		log "$(echo_green "[OK]"): remove check [$file]"
	else
		log "$(echo_red "[ERROR]"): remove check [$file]"
		exit 1
	fi
}

# backup
do_backup() {
	local src="$1"  backup_dst="$2"
	/bin/mkdir -p "${backup_dst}"  >> ${update_flog} 2>&1
	if [ -d "${backup_dst}" ]; then
		log "$(echo_green "[OK]"): create backup directory [${backup_dst}]"
		/bin/cp -afL "${src}" "${backup_dst}" >> ${update_flog} 2>&1
		if [ "$?" == "0" ]; then
			log "$(echo_green "[OK]"): backup [$src]"
		else
			log "$(echo_red "[ERROR]"): backup [$src]"
			exit 1
		fi
	else
		log "$(echo_red "[ERROR]"): create backup directory [${backup_dst}]"
		exit 1
	fi
}


# Main Begin ...
#

# check utils
UTIL_LACK=$( util_check )
if [ -n "${UTIL_LACK}" ]; then
        echo_red "lack utils: [${UTIL_LACK}]";echo
        exit 1
fi

# check root privileges
if [ "$(id -u)" != "0" ]; then
	echo_red "root privileges required!";echo
	exit 1
fi

# 1. get args
updatename=$1
workmode=$2		# print, check, backup, go
MODE=0

# 2. check args
if [ -z "${updatename}" ]; then
	show_help
fi
if [ -z "${workmode}" ]; then
	workmode="print"
fi
if [ "${workmode}" == "print" ]; then
	MODE=0
elif [ "${workmode}" == "check" ]; then
	MODE=1
elif [ "${workmode}" == "backup" ]; then
	MODE=2
elif [ "${workmode}" == "go" ]; then
	MODE=3
else
	show_help
fi


# 4. check update.cfg
if [ -f "${update_fcfg}" ] && [ -s "${update_fcfg}" ]; then
	:
else
	echo_red "[${update_fcfg}] not exist or empty!";echo
	exit 1
fi

# 5. log start
log
log
log "update start ..."

# 6. read change lst
newaddlst=$( read_ini "${update_fcfg}" add 2>&- )
removelst=$( read_ini "${update_fcfg}" remove 2>&- )
modifylst=$( read_ini "${update_fcfg}" modify 2>&- )
backuplst=$( read_ini "${update_fcfg}" backup 2>&- )

newaddnum=$( echo -e "${newaddlst}" | sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
removenum=$( echo -e "${removelst}" | sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
modifynum=$( echo -e "${modifylst}" | sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )
backupnum=$( echo -e "${backuplst}" | sed -e '/^[ \t]*$/d' | awk -v RS="\n" 'END{print NR}' )

log "newadd: (${newaddnum})"
_log "newadd: (${newaddnum}) ${newaddlst}"
log "remove: (${removenum})"
_log "remove: (${removenum}) ${removelst}"
log "modify: (${modifynum})"
_log "modify: (${modifynum}) ${modifylst}"
log "backup: (${backupnum})"
_log "backup: (${backupnum}) ${backuplst}"

# 7. action do backup
if [ -n "${backuplst}" ]; then
	backup_path="${update_back}/$(date +%F_%T)"
	for fbackup in `echo "${backuplst}"`
	do
		fbackup="${INST_DIR}/${fbackup}"
		do_backup "${fbackup}" "${backup_path}"
	done
fi

# 8. action do remove
if [ -n "${removelst}" ]; then
	for fremove in `echo "${removelst}"`
	do
		fremove_dst="${INST_DIR}/${fremove}"
		do_remove "${fremove_dst}"
		remove_check "${fremove_dst}"
	done
fi

# 9. action do add
if [ -n "${newaddlst}" ]; then
	for fadd in `echo "${newaddlst}"`
	do
		fadd_src=$(echo -e "${fadd}" | /bin/awk -F "${SEPERATOR}" '{print $2}')
		fadd_dst=$(echo -e "${fadd}" | /bin/awk -F "${SEPERATOR}" '{print $1}')
		fadd_src="${update_path}/${fadd_src}/${fadd_dst}"
		fadd_dst="${INST_DIR}/${fadd_dst}"
		do_add "${fadd_src}" "${fadd_dst}"
		copy_check "${fadd_src}" "${fadd_dst}"
	done
fi

# 10. action do replace
if [ -n "${modifylst}" ]; then
	for fmodify in `echo "${modifylst}"`
	do
		fmodify_src=$(echo -e "${fmodify}" | /bin/awk -F "${SEPERATOR}" '{print $2}')
		fmodify_dst=$(echo -e "${fmodify}" | /bin/awk -F "${SEPERATOR}" '{print $1}')
		fmodify_src="${update_path}/${fmodify_src}/${fmodify_dst}"
		fmodify_dst="${INST_DIR}/${fmodify_dst}"
		do_replace "${fmodify_src}" "${fmodify_dst}"
		copy_check "${fmodify_src}" "${fmodify_dst}"
	done
fi

# 11. log finished
log "update finished."
