#!/usr/bin/env bash

export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"

# BASE DIR DEF
BASE_DIR=$( cd $(dirname $0) && pwd)

# DIR DEF
FILES_DIR="${BASE_DIR}/files"
EL6_64DIR="${FILES_DIR}/esop/rhel6_x86_64"
EL5_64DIR="${FILES_DIR}/esop/rhel5_x86_64"
EL5_32DIR="${FILES_DIR}/esop/rhel5_i386"
PGMAILDIR="${FILES_DIR}/pgmail"
LOGS_DIR="${BASE_DIR}/logs"
VAR_DIR="${BASE_DIR}/var"

# FILE DEF
LOGFILE="${LOGS_DIR}/${0##*/}.log"
EL6_64FILE="${EL6_64DIR}/esop-1.0.1-rhel6.x86_64.rpm"
EL5_64FILE="${EL5_64DIR}/esop-1.0.1-rhel5.x86_64.rpm"
EL5_32FILE="${EL5_32DIR}/esop-1.0.1-rhel5.i386.rpm"
PGMAILFILE="${PGMAILDIR}/esop-plugingroup-mail-0.1.rhel.noarch.rpm"


# UPGRADE DEF
SYS_HOSTS="/etc/hosts"
ESOP_PATH="/usr/local/esop"
MOLE_PATH="${ESOP_PATH}/agent/mole"
MOLECONF_PATH="${MOLE_PATH}/conf"
PROXYETC_PATH="${ESOP_PATH}/agent/etc"
MOLECONF_SAVE="${VAR_DIR}/conf"
PROXYETC_SAVE="${VAR_DIR}/etc"
ESOP_RPMNAME="esop"
PGMAIL_RPMNAME="esop-plugingroup-mail"
REQUIRED_UTILS=(
	"/bin/awk"
	"/bin/sed"
	"/bin/rpm"
	"/bin/cp"
	"/bin/rm"
	"/bin/mv"
)
RESTORE_MOLECOMM_FILES=(
        ".mole.ini"
        "cpu_usage.ini"
        "disk_fs.ini"
        "disk_space.ini"
        "memory.ini"
        "notify_oom.ini"
        "notify_syslogin.ini"
        "port.ini"
        "sysload.ini"
        "system_dyninfo.ini"
        "system_fixinfo.ini"
        "tcp_conn.ini"
        "traffic.ini"
)
RESTORE_MOLESPEC_FILES=(
	"disk_iostat.ini"
	"process.ini"
)
RESTORE_PROXY_FILES=(
	"etm_agent.ini"
	"etm_phptd.ini"
)
RESTORE_PGMAIL_FILES=(
	"http_svr.ini"
	"imap_svr.ini"
	"smtp_svr.ini"
	"pop_svr.ini"
	"dns_svr.ini"
	"emp_mailqueue.ini"
)
CLEANED_FILES=(
	"/tmp/.etm_phptd.ini.saveold"
	"/tmp/.etm_agent.ini.saveold"
	"/tmp/.mole.ini.saveold"
)
CLEANED_LINKS=(
	"/usr/bin/mole"
	"/usr/bin/esop"
)



# FUNC DEF

# Terminal color
echo_green() {
  local content=$*
  echo -e "\033[1;32m${content}\033[0m\c "
}
echo_yellow() {
  local content=$*
  echo -e "\033[1;33m${content}\033[0m\c "
}
echo_red() {
  local content=$* 
  echo -e "\033[1;31m${content}\033[0m\c "
}

_check() {
  if [ $? == 0 ]; then
        echo -e " -- $(date +%F_%T)  succed!  ${*} " | tee -a $LOGFILE
  else
        echo -e " -- $(date +%F_%T)  failed!  ${*} " | tee -a $LOGFILE
        exit 1
  fi  
}

_notice() {
	echo -e " -- $(date +%F_%T)  notice!  ${*} " | tee -a $LOGFILE
}

_info() {
	echo -e " -- $(date +%F_%T)  info!  ${*} " | tee -a $LOGFILE
}

util_check() {
	local total=0 err=0 succ=0
	local lacklst=

	for util in ${REQUIRED_UTILS[*]}
	do
		((total++))
		if [ -f "${util}" -a -x "${util}" ]; then
			((succ++))
		else
			((err++))
			lacklst="${lacklst} ${util}"
		fi
	done

	if [ $err -ne 0 ]; then
		echo -en "${lacklst}"
	fi
}

is_esop_installed() {
	if /bin/rpm -qi $ESOP_RPMNAME >/dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

is_pgmail_installed() {
	if /bin/rpm -qi $PGMAIL_RPMNAME >/dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

get_esopver() {
	local result=
	if is_esop_installed;  then
		result=$( /bin/rpm -q --queryformat "%{version}-%{release}" $ESOP_RPMNAME 2>&- )
	fi
	echo -en "${result}"
}

get_pgmailver() {
	local result=
	if is_pgmail_installed; then
        	result=$( /bin/rpm -q --queryformat "%{version}-%{release}" $PGMAIL_RPMNAME 2>&- )
        fi
        echo -en "${result}"
}

get_osrelease() {
	local lsb_release="/usr/bin/lsb_release" file1="/etc/redhat-release" file2="/etc/issue" 
	local result=
	if [ -f "${lsb_release}" -a -x "${lsb_release}" ]; then
		result=$( $lsb_release -d 2>&- | awk '(/Description:/) {gsub("Description:[ \t]*","",$0);print;exit;}' )
	elif [ -f "${file1}" -a -s "${file1}" ]; then
		result=$( head -n1 "${file1}" )
	elif [ -f "${file2}" -a -s "${file2}" ]; then
		result=$( head -n1 "${file2}" )
	fi
	echo -en "${result}"
}

get_rhel56() {
	local osrelease="$(get_osrelease)"
	local result=
	if ( echo "${osrelease}" | grep -E -i "release[ \t]*5" ) >/dev/null 2>&1; then
		result="rhel5"
	elif ( echo "${osrelease}" | grep -E -i "release[ \t]*6" ) >/dev/null 2>&1; then
		result="rhel6"
	fi
	echo -en "${result}"
}

read_ini_config() {
	local config_file=$1  section=$2  key=$3
	local result=
	if [ -f "${config_file}" -a -s "${config_file}" ]; then
		result=$( cat ${config_file} | tr '\t' ' ' |\
                        awk -F"=" '\
                                ($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next}\
                                ( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit}\
                                ( k==1 && x==1 && $1~/^'${key}'\>/ ){gsub("^'${key}' *=","",$0);print;exit;}' 2>&- |\
                         sed -e 's/^[ \t]*//; s/[ \t]*$//;' 2>&- )
	fi
	echo -en "${result}"
}

update_ini_config() {
	local config_file=$1  section=$2  key=$3;
	shift 3;
	local value=$*
	if [ -f "${config_file}" -a -s "${config_file}" ]; then
		local linenum=$( cat ${config_file} | tr '\t' ' ' |\
			awk -F"=" '\
				($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next}\
				( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit}\
				( k==1 && x==1 && $1~/^'${key}'\>/ ){print NR;exit;}' )
		if [ -z "${linenum}" ]; then
			return 2
		else
			sed -i ''${linenum}'c'"${key}"' = '"${value}"'' "${config_file}" >> $LOGFILE 2>&1
			if [ "$?" == "0" ]; then
				return 0
			else
				return 1
			fi
		fi
	else
		return 3
	fi
}

add_ini_config() {
	local config_file=$1  section=$2  key=$3;
	shift 3;
	local value=$*
	if [ -f "${config_file}" -a -s "${config_file}" ]; then
		local section_linenum=$( cat ${config_file} | tr '\t' ' ' |\
			awk '($0~/^ *\[ *'${section}' *\] *$/){print NR;exit;}' )
		if [ -z "${section_linenum}" ]; then
			return 2
		else
			sed -i ''${section_linenum}'a'"${key}"' = '"${value}"'' "${config_file}" >> $LOGFILE 2>&1
			if [ "$?" == "0" ]; then
				return 0
			else
				return 1
			fi
		fi
	else
		return 3
	fi
}

del_ini_config() {
	local config_file=$1  section=$2  key=$3;
	if [ -f "${config_file}" -a -s "${config_file}" ]; then
		local linenum=$( cat ${config_file} | tr '\t' ' ' |\
			awk -F"=" '\
				($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next}\
				( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit}\
				( k==1 && x==1 && $1~/^'${key}'\>/ ){print NR;exit;}' )
		if [ -z "${linenum}" ]; then
			return 2
		else
			sed -i ''${linenum}'d' "${config_file}" >> $LOGFILE 2>&1
			if [ "$?" == "0" ]; then
				return 0
			else
				return 1
			fi
		fi
	else
		return 3
	fi
}

save_configs() {
	/bin/cp -af "${MOLECONF_PATH}" "${MOLECONF_SAVE}" >> $LOGFILE 2>&1
	_check "save mole configs"

	/bin/cp -af "${PROXYETC_PATH}" "${PROXYETC_SAVE}" >> $LOGFILE 2>&1
	_check "save proxy configs"
}

rpm_uninstall() {
	/bin/rpm -e $ESOP_RPMNAME  >> $LOGFILE 2>&1
	_check "uninstall $ESOP_RPMNAME"

	if [ -z "${PGMAIL_VERSION}" ]; then
		_notice "uninstall $PGMAIL_RPMNAME skip, as not installed before"
	else
		/bin/rpm -e $PGMAIL_RPMNAME >> $LOGFILE 2>&1
		_check "uninstall $PGMAIL_RPMNAME"
	fi
}

clean_oldfiles() {
	if [ -d "${ESOP_PATH}" ]; then
		/bin/mv -f "${ESOP_PATH}" "${ESOP_PATH}_${ESOP_VERSION}_${OS_RHEL56}" >> $LOGFILE 2>&1
		_check "backup old installation directories"

	fi
	for file in ${CLEANED_FILES[*]}
	do
		if [ -f "${file}" ]; then
			/bin/rm -f "${file}" >> $LOGFILE 2>&1
			_check "remove ${file}"
		else
			_info "file $file not exist, nothing to do"
		fi
	done
	for file in ${CLEANED_LINKS[*]}
	do
		if [ -L "${file}" ]; then
			/bin/rm -f "${file}" >> $LOGFILE 2>&1
			_check "remove ${file}"
		else
			_info "link $file not exist, nothing to do"
		fi
	done
}

rpm_install() {
	
	local rpmfile=

	if [ "${OS_RHEL56}" == "rhel5" ]; then
		if [ "$(/bin/uname -a 2>&- | grep -E -o "x86_64")" != "" ]; then
			rpmfile="${EL5_64FILE}"
		else
			rpmfile="${EL5_32FILE}"
		fi
	elif [ "${OS_RHEL56}" == "rhel6" ]; then
		if [ "$(/bin/uname -a 2>&- | grep -E -o "x86_64")" != "" ]; then
			rpmfile="${EL6_64FILE}"
		fi
	fi

	/bin/rpm -ivh "${rpmfile}"  >> $LOGFILE 2>&1
	_check "install ${ESOP_RPMNAME}"

	if [ -z "${PGMAIL_VERSION}" ]; then
		_notice "install $PGMAIL_RPMNAME skip, as not installed before"
	else
		/bin/rpm -ivh ${PGMAILFILE} >> $LOGFILE 2>&1
		_check "install ${PGMAIL_RPMNAME}"
	fi
}

restore_configs() {
	
	# restore mole common config files
	for file in ${RESTORE_MOLECOMM_FILES[*]}
	do
		/bin/cp -f "${MOLECONF_SAVE}/${file}"  "${MOLECONF_PATH}/${file}"
        	_check "restore mole common configs ${file}"
	done

	# restore mole special config files if esop version = 1.0-beta2
	if [ "${ESOP_VERSION}" == "1.0-beta1" ]; then
		_notice "restore mole special configs skip, as esop version ${ESOP_VERSION}"
	elif [ "${ESOP_VERSION}" == "1.0-beta2" ]; then
		_notice "restore mole special configs continue, as esop version ${ESOP_VERSION}"
		for file in ${RESTORE_MOLESPEC_FILES[*]}
		do
			/bin/cp -f "${MOLECONF_SAVE}/${file}"  "${MOLECONF_PATH}/${file}"
			_check "restore mole special configs ${file}"
		done
	fi

	# restore pgmail config files if pgmail installed
	if [ -z "${PGMAIL_VERSION}" ]; then
		_notice "restore $PGMAIL_RPMNAME configs skip, as not installed before"
	else
		for file in ${RESTORE_PGMAIL_FILES[*]}
		do
			/bin/cp -f "${MOLECONF_SAVE}/${file}"  "${MOLECONF_PATH}/${file}"
			_check "restore $PGMAIL_RPMNAME configs ${file}"
		done
	fi

	# restore proxy config files
	for file in ${RESTORE_PROXY_FILES[*]}
	do
		/bin/cp -f "${PROXYETC_SAVE}/${file}"  "${PROXYETC_PATH}/${file}"
        	_check "restore proxy configs"
	done
}

upgrade_configs() {
:
}

upgrade_cksum() {
:
}


#
### Main Body Begin ...
#

if [ "$(/usr/bin/id -u 2>&-)" != "0" ]; then
  echo_red "root privilege required!";echo
  exit 1
fi

ESOP_VERSION=$( get_esopver )
PGMAIL_VERSION=$( get_pgmailver )
if [ -z "$ESOP_VERSION" ]; then
  echo_red "rpm $ESOP_RPMNAME not installed!";echo
  exit 1
fi

OS_RHEL56=$( get_rhel56 )
if [ -z "$OS_RHEL56" ]; then
  echo_red "can't get os release 5/6 ?";echo
  exit 1
fi

UTIL_LACK=$( util_check )
if [ -n "${UTIL_LACK}" ]; then
  echo_red "lack utils: [${UTIL_LACK}]";echo
  exit 1
fi
