#!/bin/bash

export PATH="${PATH}:/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

### Global Vars Def
BASE_DIR="$(cd $(dirname $0); pwd)"
LOG_DIR="${BASE_DIR}/logs"
LOGFILE="${BASE_DIR}/logs/${0##*/}.log"

PATH_TARBALL="${BASE_DIR}/opt/balls"
PATH_EXTRACT="${BASE_DIR}/opt/extract"

PATH_ESOP="/usr/local/eyou/toolmail"

PATH_OPT="${PATH_ESOP}/opt"



[ "$1" == "clean" ] && {
   rm -rf "${PATH_EXTRACT}"
   exit 0
}

# Command Def
CMD_UNTAR_GZ="tar -zxf"
CMD_MAKE="make"


OS_BIT=$(getconf LONG_BIT 2>&-)
if [ -z "${OS_BIT}" ] || [ ! -z "${OS_BIT//[0-9]}" ]; then
	OS_BIT="32"
fi



# Global Func Def

# - check_rc
check_rc() {
  if [ $? == 0 ]; then
        echo -e " -- $(date +%F_%T)  succed!  ${*} " | tee -a $LOGFILE
  else
        echo -e " -- $(date +%F_%T)  failed!  ${*} " | tee -a $LOGFILE
        exit 1
  fi
}


# Build Func Def


# -- build_erlang
build_erlang() {
  local filename="otp_src_R16B03.tar.gz"  dirname="otp_src_R16B03"

  $CMD_UNTAR_GZ $PATH_TARBALL/$filename -C $PATH_EXTRACT
  cd $PATH_EXTRACT/$dirname

  CMD_CONFIG=" \
  	./configure \
		--prefix=$PATH_OPT/erlang \
		--enable-hipe \
		--enable-threads \
		--enable-smp-support \
		--enable-kernel-poll
  "

  eval $CMD_CONFIG >> $LOGFILE 2>&1
  check_rc "configure $filename"

  $CMD_MAKE >> $LOGFILE 2>&1
  check_rc "make $filename"

  $CMD_MAKE install >> $LOGFILE 2>&1
  check_rc "install $filename"
} 

# -- build_rabbitmq
build_rabbitmq() {
  local filename="rabbitmq-server-3.3.5.tar.gz"  dirname="rabbitmq-server-3.3.5"

  $CMD_UNTAR_GZ $PATH_TARBALL/$filename -C $PATH_EXTRACT
  cd $PATH_EXTRACT/$dirname

  $CMD_MAKE TARGET_DIR=$PATH_OPT/rabbitmq \
		SBIN_DIR=$PATH_OPT/rabbitmq/sbin \
		MAN_DIR=$PATH_OPT/rabbitmq/man \
		DOC_INSTALL_DIR=$PATH_OPT/rabbitmq/doc  install  >> $LOGFILE 2>&1
  check_rc "install $filename"

  /bin/mkdir -p $PATH_OPT/bin/
  check_rc "create directory opt/bin"

  /bin/ln -s $PATH_OPT/rabbitmq/sbin/{rabbitmqctl,rabbitmq-server,rabbitmq-defaults,rabbitmq-env,rabbitmq-plugins} $PATH_OPT/bin/
  check_rc "create five rabbitmq links"

  /bin/sed -i -e '/^SYS_PREFIX=/cSYS_PREFIX=/usr/local/eyou/toolmail1' $PATH_OPT/rabbitmq/sbin/rabbitmq-defaults
  check_rc "modify PREFIX in rabbitmq-defaults"

  /bin/mkdir -p $PATH_ESOP/etc/rabbitmq $PATH_ESOP/app/sbin $PATH_ESOP/data/rabbitmq $PATH_ESOP/log/rabbitmq $PATH_ESOP/run
  check_rc "create directory etc/rabbitmq app/sbin data/rabbitmq log/rabbitmq run"

  /bin/cp -fL $PATH_TARBALL/etc/rabbitmq/rabbitmq-env.conf $PATH_ESOP/etc/rabbitmq
  check_rc "copy etc/rabbitmq/rabbitmq-env.conf to $PATH_ESOP/etc/rabbitmq"

  /bin/cp -fL $PATH_TARBALL/etc/etm_init_config $PATH_ESOP/etc
  check_rc "copy etc/etm_init_config to ${PATH_ESOP}/etc"

  /bin/cp -fL $PATH_TARBALL/app/sbin/eyou_toolmail $PATH_ESOP/app/sbin
  check_rc "copy app/sbin/eyou_toolmail to ${PATH_ESOP}/app/sbin"
}


# -- make_tarball 
make_tarball() {

  local tar_createdir="$BASE_DIR/esop_rabbitmq"
  local tar_filename="esop_rabbitmq.tar.gz"

  mkdir -p $tar_createdir/files
  check_rc "create local $tar_createdir/files"
  
  cp -a ${PATH_ESOP}/*  $tar_createdir/files
  check_rc "copy $PATH_ESOP to local $tar_createdir/files"

  cp -a $PATH_TARBALL/install $tar_createdir
  check_rc "copy $PATH_TARBALL/install  to local $tar_createdir/"

  cd $BASE_DIR
  check_rc "changing into $BASE_DIR"

  tar -czf $tar_filename ${tar_createdir##*/}
  check_rc "make tarball on $tar_createdir for $BASE_DIR/$tar_filename"

  rm -rf $tar_createdir
  check_rc "remove $tar_createdir"
}

### Main Body Begin ...

if [ "$(id -u)" != "0" ]; then
  echo " root privileges required! "
  exit 1
fi

echo -e "\n -- $(date +%F_%T) -- BUILD START -- \n\n" >> $LOGFILE

if [ -d "${PATH_ESOP}" ]; then
  rm -rf "${PATH_ESOP}"
  check_rc "remove ${PATH_ESOP}"
fi

if [ -d "${PATH_EXTRACT}" ]; then
  rm -rf "${PATH_EXTRACT}"
  check_rc "remove ${PATH_EXTRACT}"
fi

mkdir -p "${LOG_DIR}" "${PATH_EXTRACT}" "${PATH_OPT}"


build_erlang
build_rabbitmq
make_tarball


if [ -d "${PATH_ESOP}" ]; then
  rm -rf "${PATH_ESOP}"
  check_rc "remove ${PATH_ESOP}"
fi

if [ -d "${PATH_EXTRACT}" ]; then
  rm -rf "${PATH_EXTRACT}"
  check_rc "remove ${PATH_EXTRACT}"
fi
echo -e "\n -- $(date +%F_%T) -- BUILD END -- \n\n" >> $LOGFILE
