#!/usr/bin/env bash

#
# Inner Plugin:  periodic clear tmpfiles logfiles snapfiles.
#

# BASE_DIR DEF
[ -z ${BASE_DIR} ] && {
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
        BASE_DIR=${BASE_DIR%/*}
}
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }   
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=          ### { ok | warn | crit | unknown }
TYPE=           ### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
tmpfile_reserve_time=$( read_mole_config mole_clear_overdue tmpfile_reserve_time )
logfile_reserve_time=$( read_mole_config mole_clear_overdue logfile_reserve_time )
snapfile_reserve_time=$( read_mole_config mole_clear_overdue snapfile_reserve_time )
snapdir_maxsize=$( read_mole_config mole_clear_overdue snapdir_maxsize )
take_over_proxylog=$( read_mole_config mole_log_rotate take_over_proxylog )

# if null or invalid set default.
is_int "${tmpfile_reserve_time}" || tmpfile_reserve_time=7
is_int "${logfile_reserve_time}" || logfile_reserve_time=180
is_int "${snapfile_reserve_time}" || snapfile_reserve_time=7
is_int "${snapdir_maxsize}" || snapdir_maxsize=4096
[ -z "${take_over_proxylog}" ] && take_over_proxylog="no"


# check function here
check() {
  local result= dellist= tmpfile_dirlist= tmpfiles= logfiles= snapfiles= proxyfiles=
  local total_num=0  t_num=0  l_num=0  s_num=0  p_num=0

  # First check if the top directories which to be searched is invalid or not.
  # You must take care here because it releated to deletion operations.
  # If one of the following three variables is invalid, exit.
  [ "$( sub_str "${TMP_DIR}" "mole/tmp" )" == "no" ] && {
	EXIT_STATUS=${STATE_CRIT};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="Critical Error: TMP_DIR [${TMP_DIR}] is invalid";
	return
  }
  [ "$( sub_str "${BACK_DIR}" "mole/log/backup" )" == "no" ] && {
        EXIT_STATUS=${STATE_CRIT};
        LEVEL="unknown";
        TYPE="str";
	CONTENT="Critical Error: BACK_DIR [${BACK_DIR}] is invalid"
	return
  }
  [ "$( sub_str "${SNAPSHOT_DIR}" "mole/log/snapshot" )" == "no" ] && {
        EXIT_STATUS=${STATE_CRIT};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="Critical Error: SNAPSHOT_DIR [${SNAPSHOT_DIR}] is invalid"
	return
  }

  # Search files by /usr/bin/find with option -follow  (this maybe dangerous)
  # This may be very dangerous if somebody created a symbolic link like this:
  # ln -sv /etc/  mole/log/snapshot/
  # Hope nobody would be stupid like that

  # 1. search tmpfiles

  # set tmp dirlist.
  for plugin_name in `list_plugin_section`
  do
	[ -d "${TMP_DIR}/${plugin_name}" ] && {
		tmpfile_dirlist="${tmpfile_dirlist} ${TMP_DIR}/${plugin_name}"
	}
  done
  [ -d "${TMP_DIR}/mailbody" ] && tmpfile_dirlist="${tmpfile_dirlist} ${TMP_DIR}/mailbody"

  # search tmpfiles in tmpdirs.
  [ -z "${tmpfile_dirlist//[ ]/}" ] && {
	result="${result} tmpfile: No temperary directories be searched ###" 
  } || {
	tmpfiles=$( /usr/bin/find ${tmpfile_dirlist} -follow -type f -ctime +${tmpfile_reserve_time} -print 2>&- )
	[ -z "${tmpfiles}" ] && {
		t_num=0
	} || {
		t_num=$(echo -e "${tmpfiles}" | wc -l)
	}
	dellist="${dellist} ${tmpfiles} \n"   ### \n here is important
  	result="${result} tmpfile: ${t_num} files ###"
  }

  # 2. search logfiles
  logfiles=$( /usr/bin/find ${BACK_DIR} -follow -type f -ctime +${logfile_reserve_time} -print 2>&- )
  [ -z "${logfiles}" ] && {
	l_num=0
  } || {
  	l_num=$(echo -e "${logfiles}" | wc -l)
  }
  dellist="${dellist} ${logfiles} \n"   ### \n here is important
  result="${result} logfile: ${l_num} files ###"

  # 3. search snapfiles
  snapfiles=$( /usr/bin/find ${SNAPSHOT_DIR} -follow -type f -ctime +${snapfile_reserve_time} -print 2>&- )
  [ -z "${snapfiles}" ] && {
	s_num=0
  } || {
  	s_num=$(echo -e "${snapfiles}" | wc -l)
  }
  dellist="${dellist} ${snapfiles} \n"   ### \n here is important
  result="${result} snapfiles: ${s_num} files ###"

  # P. search proxyfiles
  if [ "${take_over_proxylog}" == "yes" ]; then
        local PROXY_LOGBACKDIR="/usr/local/esop/agent/log/backup"
	proxyfiles=$( /usr/bin/find ${PROXY_LOGBACKDIR} -follow -type f -ctime +${logfile_reserve_time} -print 2>&- )
	[ -z "${proxyfiles}" ] && {
		p_num=0
	} || {
		p_num=$(echo -e "${proxyfiles}" | wc -l)
	}
	dellist="${dellist} ${proxyfiles} \n"	### \n here is important
	result="${result} proxyfiles: ${p_num} files ###"
  fi

  total_num=$(( ${t_num} + ${l_num} + ${s_num} + ${p_num} ))
  [ "${total_num}" == "0" ] && {
	result="No file to be cleaned up ###" 
  } || {
	result="${result} total: ${total_num} files to be cleaned up: $(echo -e "${dellist}" | tr '\n' ' ') ###"
  }

  # 4. delete files
  # for line in `echo -e "${dellist}"`     ### can't deal filename with space.
  echo -e "${dellist}" | while read line
  do
	[ ! -z "${line//[ ]}" -a -f "${line}" ] && /bin/rm -f "${line}" 2>&-
  done

  # 5. check snapdir_maxsize
  # remove oldest directory if {SNAPSHOT_DIR} maxsize exceed 
  snap_dirsize=$( /usr/bin/du -sm "${SNAPSHOT_DIR}" 2>&- | awk '{print $1}' )
  if ! is_int "${snap_dirsize}"; then
	result="${result} snap directory size invalid [${snap_dirsize}] ###"
  else
  	if [ $snap_dirsize -gt ${snapdir_maxsize} ]; then
		result="${result} snap directory size [${snap_dirsize}M] >= [${snapdir_maxsize}M], cleaning up ###"
		oldestdir=$( /usr/bin/find "${SNAPSHOT_DIR}" -mindepth 1 -maxdepth 1 2>&- | sort -n | head -n1)
		if [ "$( sub_str "${oldestdir}" "mole/log/snapshot/" )" == "yes" ]; then
			result="${result} oldest dir: [${oldestdir}] will be removed ###"
			rmerr=$( /bin/rm -rf "${oldestdir}" 2>&1 1>/dev/null )
			if [ "$?" == "0" ]; then
				result="${result} remove [${oldestdir}] success ###"
			else
				result="${result} remove [${oldestdir}] failed: [${rmerr}] ###"
			fi
		else
       			result="${result} oldest dir: [${oldestdir}] is invalid, nothing to do ###"
		fi
	else
		result="${result} snap directory size [${snap_dirsize}M], nothing to do ###"
  	fi
  fi

  EXIT_STATUS="${STATE_OK}"
  LEVEL="ok"
  TYPE="str"
  CONTENT="Clear_Overdue Files Finished | No Alert | ${result}"
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}  
