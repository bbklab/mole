#!/usr/bin/env bash

# Global Def
PATH_ESOP="/usr/local/esop/agent"
PATH_APP="$PATH_ESOP/app"
PATH_BIN="$PATH_APP/bin"
PATH_SBIN="$PATH_APP/sbin"
PATH_RUN="$PATH_ESOP/run"
PATH_OPT="$PATH_ESOP/opt"
PATH_OPT_SBIN="$PATH_OPT/sbin"
PATH_LOG="$PATH_ESOP/log"
PATH_INITLOG="$PATH_LOG/init.out"

PATH_MOLE="${PATH_ESOP}/mole"
PATH_MOLE_SBIN="${PATH_MOLE}/sbin"
PATH_MOLE_RUN="${PATH_MOLE}/tmp/run"

PIDF_PHPTD="$PATH_RUN/esop_phptd.pid"
PIDF_MOLE="$PATH_MOLE_RUN/esop_mole.pid"

ARRAY_COMPONENT=(
    # proc_name(fake check)     	# display_name		# pid_file
    "phptd" 				"proxy"			"${PIDF_PHPTD}"
    "mole"  				"mole"			"${PIDF_MOLE}"
)

EXEC_USER="eyou"
CMD_SUDO_EYOU="sudo -u $EXEC_USER"

LINE="---------------------"

PRINTF_MAXLEN="15"

#
### Func Def
#

# Terminal color
#
echo_green() {
  local content=$*
  echo -e "\033[1;32m${content}\033[0m\c "
}
echo_yellow() {
  local content=$*
  echo -e "\033[1;33m${content}\033[0m\c "
}
echo_red() { 
  local content=$* 
  echo -e "\033[1;31m${content}\033[0m\c "
}

# Line
#
echo_line() {
  if test "${1}" ; then
  	echo -en "\n\n${1}\n${LINE}\n"
  else
	echo -en "${LINE}\n"
  fi
}

### Help
##
show_help() {
cat << EOF

   $(echo_green "Help:")
	help
	start		[proc]
	stop		[proc]
	status		[proc]
	restart		[proc]
	mole		mole arguments
	?		show alias

   $(echo_green "Example:")
	help
	start 		[proxy|mole]
	stop		[proxy|mole]
	status		[proxy|mole]
	restart		[proxy|mole]
	mole

EOF
exit 0
}

show_alias() {
cat << EOF

   $(echo_green "Alias:")
	start	=> 	a
	stop	=> 	z, kill, k
	status	=>	s, watch, w
	restart	=>	r
	mole	=> 	m

   $(echo_green "Example:")
	a		[proxy|1|mole|2]
	z,k		[proxy|1|mole|2]
	s,w		[proxy|1|mole|2]
	r		[proxy|1|mole|2]
	m
EOF
}

# $1 contains $2 or not
# Usage:        sub_str "strings" "str"
#
sub_str() {  
  [ "${1#*$2*}" == "$1" ] && echo no || echo yes  
}

# $1 is comp or not
# Usage:	is_comp phptd 
#
is_comp() {
  for((i=0;i<${#ARRAY_COMPONENT[*]};i+=2))
  do
	if [ "$1" == "${ARRAY_COMPONENT[$i]}" ]; then
		return 0
		break
	fi
  done
  return 1
}

# get pid from pidfile
# usage:	get_pid {pid_file}
# return:	0 | 1 | 2
#
get_pid(){
  local fpid=$1
  local pid=

  if [ -f "${fpid}" -a -r "${fpid}" ]; then
	pid=$(awk '{print $1;exit;}' "${fpid}" 2>&-)
	[ -z "${pid}" -o ! -z "${pid//[0-9]}" ] && {
		return 2	## pidfile exists but pid invalid
	} 
  else
	return 1		## pidfile not exist
  fi

  echo "${pid}"			## pidfile exists and pid normal
  return 0
}

# get pid running status
# usage:	is_running {pid_file} {pname}
# return:	0 running | 1 dead | 2 dead with pidfile left | 3 fake?
#
is_running(){
  local fpid=$1 pname=$2
  local pid= rc=
  
  pid=$(get_pid "${fpid}")
  rc=$?
  if [ "$rc" == "0" ]; then
  	if [ -d "/proc/${pid}/" ]; then
		local cmdline=$(cat "/proc/${pid}/cmdline" 2>&-)
		if [ "$(sub_str "${cmdline}" "${pname}")" == "yes" ]; then
			return 0	# running
		else
			return 3	# fake?
		fi
	else
		return	2		# dead with pidfile left
  	fi
  elif [ "$rc" == "1" ]; then
	return 1			# dead (pidfile not exist)
  elif [ "$rc" == "2" ]; then
	return 2			# dead with pidfile left
  fi
}

start_phptd(){
  echo -en "Starting proxy ... " | tee -a $PATH_INITLOG
  if is_running "${PIDF_PHPTD}" "phptd" >>$PATH_INITLOG 2>&1; then
	echo -en "$(echo_yellow "SKIP")"
  else
	$CMD_SUDO_EYOU $PATH_SBIN/em_dynamic_config all >>$PATH_INITLOG 2>&1
	if [ "$?" != "0" ]; then
		echo -en "$(echo_red "Re-Generate dynamic config FAIL")"
		echo -en "\n"
		return 1
	fi
  	$CMD_SUDO_EYOU $PATH_BIN/etm_phptd -p $PIDF_PHPTD >>$PATH_INITLOG 2>&1
	wait; sleep 1
	if is_running "${PIDF_PHPTD}" "phptd" >>$PATH_INITLOG 2>&1; then
		echo -en "$(echo_green "OK")"
	else
		echo -en "$(echo_red "FAIL")"
	fi
  fi
  echo -en "\n" | tee -a $PATH_INITLOG
}

stop_phptd(){
  echo -en "Stoping proxy ... " | tee -a $PATH_INITLOG
  if is_running "${PIDF_PHPTD}" "phptd" >>$PATH_INITLOG 2>&1; then
  	local pid=$(get_pid ${PIDF_PHPTD})
  	[ ! -z "${pid}" ] && kill ${pid} >>$PATH_INITLOG 2>&1
  	[ -f ${PIDF_PHPTD} ] && rm -f ${PIDF_PHPTD} >> $PATH_INITLOG 2>&1
	wait; sleep 1
	if is_running "${PIDF_PHPTD}" "phptd" >>$PATH_INITLOG 2>&1; then
		echo -en "$(echo_red "FAIL")"
	else
		echo -en "$(echo_green "OK")"
	fi
  else
	echo -en "$(echo_yellow "SKIP")"
  fi
  echo -en "\n" | tee -a $PATH_INITLOG
}


start_mole(){
  echo -e "Starting mole ... " | tee -a $PATH_INITLOG
  ${PATH_MOLE_SBIN}/mole start
  wait; sleep 1
  if is_running "${PIDF_MOLE}" "mole" >>$PATH_INITLOG 2>&1; then
	echo -en "$(echo_green "OK")"
  else
	echo -en "$(echo_red "FAIL")"
  fi
  echo -en "\n" | tee -a $PATH_INITLOG
}

stop_mole(){
  echo -en "Stoping mole ... " | tee -a $PATH_INITLOG
  ${PATH_MOLE_SBIN}/mole stop >>$PATH_INITLOG 2>&1
  wait; sleep 1
  if is_running "${PIDF_MOLE}" "mole" >>$PATH_INITLOG 2>&1; then
	echo -en "$(echo_red "FAIL")"
  else
	echo -en "$(echo_green "OK")"
  fi
  echo -en "\n" | tee -a $PATH_INITLOG
}


start(){
  for ((i=0;i<${#ARRAY_COMPONENT[*]};i++))
  do
	if (($i%3 == 0)); then
		start_${ARRAY_COMPONENT[$i]}; wait
	fi
  done
}

stop(){
  for ((i=0;i<${#ARRAY_COMPONENT[*]};i++))
  do
	if (($i%3 == 0)); then
		stop_${ARRAY_COMPONENT[$i]}; wait
	fi
  done
}

# get daemon status
# useage:	status 	[pname]
#
status(){

  single(){
  	local fpid=$1 pname=$2 disname=$3
	local plen=${#pname}
	local rc=
	
	[ -z "${fpid}" -o -z "${pname}" -o -z "${disname}" ] && return 4

 	local len=$(($PRINTF_MAXLEN-$plen))

  	is_running "${fpid}" "${pname}"
  	rc=$?
  	if [ "$rc" == "0" ]; then
		local pid=$(get_pid "${fpid}")
		local pstree=$(pstree "${pid}")
		printf "${disname} %-${len}s $(echo_green "running") ${pid} ${pstree}"
  	elif [ "$rc" == "1" ]; then
		printf "${disname} %-${len}s $(echo_red "dead")"
  	elif [ "$rc" == "2" ]; then
		printf "${disname} %-${len}s $(echo_yellow "dead, but pidfile left")"
  	elif [ "$rc" == "3" ]; then
		printf "${disname} %-${len}s $(echo_yellow "fake?")"
  	fi
	printf "\n"

	return $rc
  }

  if [ "$#" == "0" ]; then
  	local _pname= _disname= _fpid=
  	for ((i=0;i<${#ARRAY_COMPONENT[*]};i++))
  	do
		if (($i%3 == 0)); then
			_pname=${ARRAY_COMPONENT[$i]}
		elif (($i%3 == 1)); then
			_disname=${ARRAY_COMPONENT[$i]}
		elif (($i%3 == 2)); then
			_fpid=${ARRAY_COMPONENT[$i]}
			single "${_fpid}" "${_pname}" "${_disname}"
		fi
  	done
  else
  	local pname=$1 disname= fpid=
	for ((i=0;i<${#ARRAY_COMPONENT[*]};i++))
	do
		if [ "${ARRAY_COMPONENT[$i]}" == "${pname}" ]; then
			disname="${ARRAY_COMPONENT[$i+1]}"
			fpid="${ARRAY_COMPONENT[$i+2]}"
			break
		fi
	done
	single "${fpid}" "${pname}" "${disname}"
  fi
}



### Main Body Begin


# 0. check root privileges or not ?
if [ "$(id -u)" != "0" ]; then
  echo_red "root privilege required!";echo
  exit 1
fi


# 1. check sudo user exist or not ?
if (id "${EXEC_USER}") >>$PATH_INITLOG 2>&1; then
  :
else
  echo_red "user ${EXEC_USER} not exists!";echo
  exit 1
fi


# 2. process args

# 2.1   pass ${*} to mole
if [ "${1}" == "mole" -o "${1}" == "m" ]; then
  shift; args=$(echo -e "${@}" | sed -e 's/"/\"/g')
  ${PATH_MOLE_SBIN}/mole ${args}
  exit $?
fi

# 2.2   process esop args
case "$#" in  
"1")
        arg1=$1;
        case "$arg1" in
        "help"|"h")
                show_help    			;;
	"?"|"/?")
		show_alias			;;
	"start"|"a")
		start
		wait
		echo_line "Status:"
		status
		echo_line
						;;
	"stop"|"kill"|"k"|"z")
		stop
		wait
		echo_line "Status:"
		status
		echo_line
						;;
	"status"|"watch"|"s"|"w")
		echo "Status:"
		echo_line
		status				
		echo_line			;;
	"restart"|"r")
		stop
		sleep 1
		start
		echo_line "Status:"
		status
		echo_line
						;;
	*)
		show_help			;;
	esac
	;;
"2")
	arg1=$1; arg2=$2
        [ -z "${arg2//[ ]}" ] && {
                echo_yellow "need arguments"; echo
                exit 1
        }
	
	[ "${arg2}" == "1" ] && arg2="phptd"
	[ "${arg2}" == "2" ] && arg2="mole"

	if ! is_comp "${arg2}" >>$PATH_INITLOG 2>&1; then
		echo "$(echo_yellow "${arg2}") not component"
		exit 1
	fi

	case "$arg1" in
	"start"|"a")
		start_${arg2}
						;;
	"stop"|"kill"|"k"|"z")
		stop_${arg2}
						;;
	"status"|"watch"|"s"|"w")
		status "${arg2}"
						;;
	"restart"|"r")
		stop_${arg2}
		sleep 1
		start_${arg2}
						;;
	*)
		show_help			;;
	esac
	;;
*)
	show_help
	;;
esac
