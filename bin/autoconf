#!/usr/bin/env bash
#
# ============================================================================
#  This Script Responsible for Configuring Plugins According by eYou Product
# ============================================================================
#
#

# === BASE_DIR DEF
#
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# === LOAD GETTEXT.SH FILE
#
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load [/usr/bin/gettext.sh] failed with status $rc"
                exit 1
        }
else
        echo "[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit"
        exit 1
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
#
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="mole"
else
        echo "locale directory [${LOCALE_DIR}] not exist or accessable, exit"
        exit 1
fi

# === SET GLOBAL LOCALE
#
glocale=$(read_mole_config global locale)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"  LC_ALL="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"  LC_ALL="zh_CN.UTF-8"
fi

# === PRECHECK
#
result=$( eval ${PRECHECK_SH} 2>&1 )
rc=$?
if [ "$rc" != "0" ]; then
        echo -e "\n$(gettext "PreCheck Result: Sorry, Current Enviroment is NOT Suitable to Run MOLE") \n" 
        echo -e "${result}"
        exit 1
fi

####################################
#                                  #
#  --*--< Global Variables >--*--  #
#                                  #
####################################


# DIR DEF
EM_INSTALL="/usr/local/eyou/mail"
EM_OPT_INSTALL="$EM_INSTALL/opt"
EM_CONFDIR="$EM_INSTALL/etc"
EM_CONFDIR_MYSQL="$EM_CONFDIR/mysql"
EM_CONFDIR_NGINX="$EM_CONFDIR/nginx/conf"
EM_CONFDIR_APACHE="$EM_CONFDIR/httpd/conf"
EM_CONFDIR_MPROXY="$EM_CONFDIR/mproxy"
EM_CONFDIR_CRTMP="$EM_CONFDIR/crtmpserver"
EM_CONFDIR_PHP="$EM_CONFDIR/php"
EM_CONFDIR_PHPZTS="$EM_CONFDIR/phpzts"
EMG_INSTALL="/var/emdg"
EMG_OPT_INSTALL="/opt"
EMG_CONFDIR="$EMG_INSTALL/etc"

# EM FILE DEF
EM_CONFIG="$EM_CONFDIR/eyou_mail.ini"
EM_INIT_CONFIG="$EM_CONFDIR/em_init_config"
EM_MTA_CONFIG="$EM_CONFDIR/em_mta.ini"
EM_PHPD_CONFIG="$EM_CONFDIR/em_phpd.ini"
EM_PLUGIN_CONFIG="$EM_CONFDIR/em_plugins.ini"
EM_MIGRATE_CONFIG="$EM_CONFDIR/em_migrate.ini"
EM_FILEDAGENT_CONFIG="$EM_CONFDIR/em_filedagent.cf"

# EMG FILE DEF
EMG_CONFIG="$EMG_CONFDIR/mail.conf"
EMG_DOMAIN_CONFIG="$EMG_CONFDIR/domain.conf"

# MOLE DEF
ESOP_PATH="/usr/local/esop/agent"
ESOP_CONF_PATH="${ESOP_PATH}/etc"
MOLE_PATH="${ESOP_PATH}/mole"
MOLE_SBIN="${MOLE_PATH}/sbin"
MOLE="${MOLE_SBIN}/mole"


# EM VERSION SUPPORTED
ARRAY_SUPPORTED_EMVERSION=(
  "5.0.4rc4"
  "5.0.4rc4.fix1"
  "5.0.4rc4.fix2"
  "5.0.6"
  "5.0.6.1"
  "5.0.6.2"
  "5.0.7"
  "8.1.0"
  "8.1.0.1"
  "8.1.0.2"
  "8.1.0.3"
  "8.1.0.3.fix1"
  "8.1.0.4"
)

# EMG VERSION SUPPORTED
ARRAY_SUPPORTED_EMGVERSION=(
)

# ARRAY EMCOMP
ARRAY_EMCOMP=(
  # comp	   # comp_regex									# min_running	 # max_conn
  "syslog"	   "/usr/local/eyou/mail/app/bin/em_syslogd"							"1" 	""
  "rsyslogd"	   "/usr/local/eyou/mail/opt/sbin/rsyslogd.+rsyslogd.conf.+em_rsyslogd.pid.*"			"1" 	""
  "mysql"  	   ".*/mysqld.*--defaults-file=/usr/local/eyou/mail/etc/mysql/my.cnf.+em_mysql.pid.*" 		"1" 	"200"
  "mysql_index"	   ".*/mysqld.*--defaults-file=/usr/local/eyou/mail/etc/mysql/my_index.cnf.+em_mysql_index.pid.*" "1"	"300"
  "mysql_log"	   ".*/mysqld.*--defaults-file=/usr/local/eyou/mail/etc/mysql/my_log.cnf.+em_mysql_log.pid.*"	"1"	"200"
  "mproxy"	   "/usr/local/eyou/mail/opt/mproxy/libexec/mysql-proxy.*em_mproxy.pid.*"			"1"	"200"
  "mproxy_index"   "/usr/local/eyou/mail/opt/mproxy/libexec/mysql-proxy.*em_mproxy_index.pid.*"			"1"	"400"
  "memcache_session" "/usr/local/eyou/mail/opt/bin/memcached.+memcache_session.pid.*"				"1"	"200"
  "memcache_fix"   "/usr/local/eyou/mail/opt/bin/memcached.+memcache_fix.pid.*"					"1"	"300"
  "memcache_hot"   "/usr/local/eyou/mail/opt/bin/memcached.+memcache_hot.pid.*"					"1"	"200"
  "memcache_config"  "/usr/local/eyou/mail/opt/bin/memcached.+memcache_config.pid.*"				"1" 	"200"
  "memcache_db"	   "/usr/local/eyou/mail/opt/bin/memcached.+memcache_db.pid.*"					"1" 	"200"
  "memcache_fastdb"  "/usr/local/eyou/mail/opt/bin/memcached.+memcache_fastdb.pid.*"				"1" 	"200"
  "gearman"	   "/usr/local/eyou/mail/opt/sbin/gearmand.+em_gearman.pid.+gearman_queue.+"			"1"	"200"
  "gearman_mta"	   "/usr/local/eyou/mail/opt/sbin/gearmand.+gearman_mta.pid.+gearman_queue_mta.*"		"1" 	"200"
  "gearman_php"    "/usr/local/eyou/mail/opt/sbin/gearmand.+gearman_php.pid.+gearman_queue_php.*"		"1" 	"200"
  "innerapi"	   "/usr/local/eyou/mail/opt/bin/php.+app/bin/em_innerapi.*"					"6" 	""
  "phpd"	   "/usr/local/eyou/mail/opt/bin/php.+app/bin/em_phpd.*"					"6"	""
  "crtmpd"	   "/usr/local/eyou/mail/opt/sbin/crtmpserver.*em_crtmpserver.pid.*"				"1"	""
  "ecs_rstorage"   "/usr/local/eyou/mail/bin/ecs_rstorage"							"2"	"100"
  "ecs_wstorage"   "/usr/local/eyou/mail/bin/ecs_wstorage"							"2"	"100"
  "ecs_tracker"	   "/usr/local/eyou/mail/bin/ecs_tracker"							"2"	"100"
  "filed"	   "/usr/local/eyou/mail/app/bin/em_filed.*"							"3"	"100"
  "filedrepd"	   "/usr/local/eyou/mail/app/bin/em_filedrepd.*"						"1"	""
  "filedagent"	   "/usr/local/eyou/mail/app/bin/em_filedagent.*"						"3"	"100"
  "httpd"	   "/usr/local/eyou/mail/opt/bin/httpd.+start.*"						"3"	"1000"
  "nginx"	   "nginx.*/usr/local/eyou/mail/opt/sbin/nginx.*"						"1"	"500"
  "httpd_web"	   "/usr/local/eyou/mail/opt/bin/httpd.+start.*" 						"3" 	"500"
  "bounce"	   "/usr/local/eyou/mail/app/bin/em_bounce"							"3"	""
  "local"	   "/usr/local/eyou/mail/app/bin/em_local"							"3"	""
  "remote"	   "/usr/local/eyou/mail/app/bin/em_remote"							"3"	""
  "mlist"	   "/usr/local/eyou/mail/app/bin/em_mlist"							"3"	""
  "smtp"	   "/usr/local/eyou/mail/app/bin/em_smtpd"							"6"	"100"
  "pop"		   "/usr/local/eyou/mail/app/bin/em_pop3d"							"6"	"300"
  "pop3"	   "/usr/local/eyou/mail/app/bin/em_pop3d"							"6"	"300"
  "imap"	   "/usr/local/eyou/mail/app/bin/em_imapd"							"6"	"150"
  "cleanup"	   "/usr/local/eyou/mail/app/bin/em_cleanup.*"							"2"	""
  "qclean"	   "/usr/local/eyou/mail/app/bin/em_qclean.*" 							"3" 	""
  "virusd"	   ""												""	""
)

# ARRAY EMCOMP SPECIAL
ARRAY_EMCOMP_SPECIAL=(
  # 5.0.4
  "mysql"	   ".*/mysqld.*--datadir=/usr/local/eyou/mail/data/mysql.*mysql.pid.*"				"1"	"300"
  # >=8.1.0.4
  "phpd"	   "/usr/local/eyou/mail/opt/bin/php.+bin/em_phpd.*"						"6"	""
  "syslog"	   "/usr/local/eyou/mail/bin/em_syslogd"							"1" 	""
  "filed"	   "/usr/local/eyou/mail/bin/em_filed.*"							"3"	"100"
  "filedrepd"	   "/usr/local/eyou/mail/bin/em_filedrepd.*"							"1"	""
  "filedagent"	   "/usr/local/eyou/mail/bin/em_filedagent.*"							"3"	"100"
  "bounce"	   "/usr/local/eyou/mail/bin/em_bounce"								"3"	""
  "local"	   "/usr/local/eyou/mail/bin/em_local"								"3"	""
  "remote"	   "/usr/local/eyou/mail/bin/em_remote"								"3"	""
  "mlist"	   "/usr/local/eyou/mail/bin/em_mlist"								"3"	""
  "smtp"	   "/usr/local/eyou/mail/bin/em_smtpd"								"6"	"100"
  "pop"		   "/usr/local/eyou/mail/bin/em_pop3d"								"6"	"300"
  "imap"	   "/usr/local/eyou/mail/bin/em_imapd"								"6"	"150"
  "cleanup"	   "/usr/local/eyou/mail/bin/em_cleanup.*"							"2"	""
)


####################################
#                                  #
#  --*--< Public Functions >--*--  #
#                                  #
####################################

# Show Help
show_usage() {
cat << EOF
        ${0##*/}
        ${0##*/} help
        ${0##*/} rpminit  {plugin1} {plugin2} ...
        ${0##*/} rpminit  all
EOF
exit 0
}

read_conf() {
	local file=$1 config=$2 kvsep=$3
	local result=   awk=

	if [ -z "${kvsep}" ]; then
		awk=" awk "
	else
		awk=" awk -F"${kvsep}" "
	fi

	if [ -f "${file}" -a -s "${file}" ]; then
		if [ -z "${config}" ]; then
			result=$( ${awk} '($0~/^[ \t]*$/){next;} ($0~/^[ \t]*#/){next;} {print $1;exit}' "${file}" 2>&- )
		else
			result=$( ${awk} '($1~/^'$config'\>/) {$1="";print;exit;}' "${file}" 2>&- )
		fi
		result=$( echo -e "${result}" | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
	fi
	echo -en "${result}"
}

read_iniconf() {
	local file=$1 section=$2 config=$3 kvsep=$4
	local result=	awk=

	if [ -z "${kvsep}" ]; then
		awk=" awk "
	else
		awk=" awk -F"${kvsep}" "
	fi

	if [ -f "${file}" -a -s "${file}" ]; then
		result=$( cat ${file} | tr '\t' ' ' |\
                        ${awk} '\
                                ($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next}\
                                ( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit}\
                                ( k==1 && x==1 && $1~/^'${config}'\>/ ){$1="";print;exit}' 2>&- |\
                         sed -e 's/^[ \t]*//; s/[ \t]*$//;' 2>&- )
		result=$( echo -e "${result}" | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
	fi
	echo -en "${result}"
}

get_emversion() {
	local result=
	local conf_phpfile="${EM_INSTALL}/app/inc/conf/conf_global.php"
	local conf_phpfile_new="${EM_INSTALL}/inc/conf/conf_global.php"
	local version_file=
	if [ -f "${conf_phpfile}" -a -s "${conf_phpfile}" ]; then
		version_file="${conf_phpfile}"
	elif [ -f "${conf_phpfile_new}" -a -s "${conf_phpfile_new}" ]; then
		version_file="${conf_phpfile_new}"
	fi
	result=$( awk -F"," '(/^[ \t]*define.+EYOUM_VERSION/){print $2;exit;}' "${version_file}" 2>&- | tr -d "'); " )
	echo -en "${result}"
}

get_emgversion() {
:
}

get_emstart() {
	local result=
	if [ -f "${EM_INIT_CONFIG}" -a -s "${EM_INIT_CONFIG}" ]; then
		result=$(awk 'BEGIN{x=0;y=0} ($0~/^[ \t]*ARRAY_START=\(/){x=1;y=1;next;} \
			($0~/^[ \t]*#/){next;} (x==1 && y==1 && $0~/^[ \t]*\)/){exit;} \
			(x==1 && y==1){gsub(" ","");print} ' "${EM_INIT_CONFIG}" 2>&-)
	fi
	echo -en "${result}"
}

get_emgstart() {
:
}

get_basedomain() {
	local result=  file=	

	if [ -f "${EM_CONFIG}" -a -s "${EM_CONFIG}" ]; then
		result=$( read_conf "${EM_CONFIG}" "server_me" "=" 2>&- )
	elif [ -f "${EMG_DOMAIN_CONFIG}" -a -s "${EMG_DOMAIN_CONFIG}" ]; then
		result=$( read_conf "${EMG_DOMAIN_CONFIG}" "" 2>&- )
	fi

	echo -en "${result}"
}

# is installed eyoumail version supported or not ?
# Return:	0,1	|	yes,no
#
is_supported_emversion() {
	local emversion=$( get_emversion 2>&- )

	for((i=0;i<=${#ARRAY_SUPPORTED_EMVERSION[*]}-1;i++))
	do
		if [[ "${emversion}" =~  ${ARRAY_SUPPORTED_EMVERSION[$i]} ]]; then
			return 0
		fi
	done

	return 1
}

# is installed eyoumail gateway version supported or not ?
# Return:	0,1	| 	yes,no
#
is_supported_emgversion() {
	return 1
}

# Should em_process start or not ?
# Usage:	is_emstarton	{process}
# Return:	0,1	|	yes,no
#
is_emstarton() {
	local process=$1

	[ -z "${EM_START}" ] && EM_START=( $(get_emstart) )
	[ -z "${process}" -o "${#EM_START[*]}" == "0" ] && return 1
	
	if is_sub "${process}" "${EM_START[*]}"; then
		return 0
	else
		return 1
	fi 
}

# Get Index of emcomp in ARRAY_EMCOMP
# Usage:	get_emcomp_index {comp}
# Return:	index number of {comp}
#
get_emcomp_index() {
	local comp="$1"  result=
	
        for ((i=0;i<=${#ARRAY_EMCOMP[*]}-1;i+=4))
        do   
                if [ "${ARRAY_EMCOMP[$i]}" == "${comp}" ]; then 
                        result=${i}
			break
                fi   
        done

	echo -en "${result}"
}

# Replace ARRAY_EMCOMP by specified array
# Usage:	replace_emcomp {item1} {item2} {item3} {item4}
#
replace_emcomp() {
	if [ $# -eq 4 ]; then
		local index1=$( get_emcomp_index "$1" 2>&- )
		if [ -z "${index1}" ]; then
			return 1
		else
			local index2=$(($index1+1))  index3=$(($index1+2))  index4=$(($index1+3))
			ARRAY_EMCOMP[$index1]="$1"
			ARRAY_EMCOMP[$index2]="$2"
			ARRAY_EMCOMP[$index3]="$3"
			ARRAY_EMCOMP[$index4]="$4"
		fi
	else
		return 1
	fi	
}

# Check if emcomp should be replaced or not ?
# Usage:	is_should_replace {comp}
# Return:	0,1	| 	yes,no
#
is_should_replace() {
	local comp="$1"		rval=1

	case "${comp}" in
	"mysql")
		if [ ! -e "/usr/local/eyou/mail/etc/mysql/my.cnf" ]; then
			rval=0
		fi
		;;
	"phpd"|"syslog"|"filed"|"filedrepd"|"filedagent"|"bounce"|"local"|"remote"|"mlist"|"smtp"|"pop"|"imap"|"cleanup")
		if [ -d "/usr/local/eyou/mail/bin/" ]; then
			rval=0
		fi
		;;
	*)
		rval=1
		;;
	esac

	return ${rval}
}

# Replace ARRAY_EMCOMP by ARRAY_EMCOMP_SPECIAL
# Usage:	replace_emcomp_special
#
replace_emcomp_special() {
	local comp=  regex=  minrun=  maxcon=

	for ((i=0;i<=${#ARRAY_EMCOMP_SPECIAL[*]}-1;i+=4))
	do
		i2=$(($i+1)) i3=$(($i+2)) i4=$(($i+3))
		comp="${ARRAY_EMCOMP_SPECIAL[$i]}"
		regex="${ARRAY_EMCOMP_SPECIAL[$i2]}"
		minrun="${ARRAY_EMCOMP_SPECIAL[$i3]}"
		maxcon="${ARRAY_EMCOMP_SPECIAL[$i4]}"

		if is_should_replace "${comp}"; then
			replace_emcomp "${comp}" "${regex}" "${minrun}" "${maxcon}"
		fi
	done
}

# List all EM_COMP
#
list_emcomp() {
	local result=

	[ "${#ARRAY_EMCOMP[*]}" == "0" ] && return 1

        for ((i=0;i<=${#ARRAY_EMCOMP[*]}-1;i+=4))
        do  
                if [ -n "${ARRAY_EMCOMP[$i]}" ]; then
			result="${result} ${ARRAY_EMCOMP[$i]}"
                fi  
        done

	echo -en "${result}"
}

# Is EM_COMP or not ?
# Usage:	is_emcomp	{comp}
# Return:	0,1	| 	yes,no
# Output:	index number of EM_COMP
#
is_emcomp() {
	local comp=$1	rval=1
	local index=
	
	[ -z "${comp}" -o "${#ARRAY_EMCOMP[*]}" == "0" ] && return 1

	for ((i=0;i<=${#ARRAY_EMCOMP[*]}-1;i+=4))
	do
		if [ "${ARRAY_EMCOMP[$i]}" == "${comp}" ]; then
			index=$i
			rval=0
			break
		fi
	done
	
	echo -en "${index}"
	return $rval
}

# Get EM_COMP regex
#
get_emcomp_regex() {
	local comp=$1	result=
	local index=

	index=$(is_emcomp "${comp}" 2>&1)

	if [ "$?" == "0" ]; then
		((index++))
		result=${ARRAY_EMCOMP[$index]}
	fi

	echo -en "${result}"
}

# Get EM_COMP min_running
#
get_emcomp_minr() {
	local comp=$1	result=
	local index=
	
	index=$(is_emcomp "${comp}" 2>&1)

	if [ "$?" == "0" ]; then
		((index+=2))
		result=${ARRAY_EMCOMP[$index]}
	fi
		
	echo -en "${result}"
}	

# Get EM_COMP max_conn
# 
get_emcomp_maxc() {
	local comp=$1	result=
	local index=
	
	index=$(is_emcomp "${comp}" 2>&1)
		
	if [ "$?" == "0" ]; then
		((index+=3))
		result=${ARRAY_EMCOMP[$index]}
	fi

	echo -en "${result}"
}


# Print em_comp information
# Usage:	get_emcompinfo	{comp}	{part}
# Note:		part  ~  bind_addr, conn_addr, comp_regex, min_running
# Output:	{bind_addr} {conn_addr} {comp_regex} {min_running}
#
get_emcompinfo() {
	local comp=$1 part=$2 result=
	local bind_addr=  conn_addr=  comp_regex=  min_running=

	local conn_memcache_session=$(read_conf "${EM_CONFIG}" "memcache_session" "=" 2>&-)
	local conn_memcache_fix=$(read_conf "${EM_CONFIG}" "memcache_fix" "=" 2>&- )
	local conn_memcache_hot=$(read_conf "${EM_CONFIG}" "memcache_hot" "=" 2>&- )
	conn_memcache_session=$(echo -en "${conn_memcache_session}" | tr ',;' ' ' | awk '{for(i=1;i<=NF;i++){ if($i~/^[^:]+:[^:]+:[^:]+$/){split($i,A,":"); print A[1]":"A[2] } if($i~/^[^:]+:[^:]+$/){print $i}  }}' 2>&-)
	conn_memcache_fix=$(echo -en "${conn_memcache_fix}" | tr ',;' ' ' | awk '{for(i=1;i<=NF;i++){ if($i~/^[^:]+:[^:]+:[^:]+$/){split($i,A,":"); print A[1]":"A[2] } if($i~/^[^:]+:[^:]+$/){print $i}  }}' 2>&-)
	conn_memcache_hot=$(echo -en "${conn_memcache_hot}" | tr ',;' ' ' | awk '{for(i=1;i<=NF;i++){ if($i~/^[^:]+:[^:]+:[^:]+$/){split($i,A,":"); print A[1]":"A[2] } if($i~/^[^:]+:[^:]+$/){print $i}  }}' 2>&-)

	local conn_mysql_dbuser=$(:)
	local conn_mysql_dbindex=$(:)
	local conn_mysql_dblog=$(:)

	local file=
	if is_emcomp "${comp}" >/dev/null 2>&1; then
		if   [ "${comp}" == "mysql" 		]; then
			file="$EM_CONFDIR_MYSQL/my.cnf"
			if [ -f "${file}" -a -s "${file}" ]; then
				local skip_network=$( awk '($0~/^[ \t]*#/){next;} \
					($0~/^[ \t]*\[mysqld\][ \t]*$/){x=1;next;} \
					(x==1 && $0~/^[ \t]*\[.+\][ \t]*$/){exit;} \
					(x==1 && $1~/^[ \t]*skip-networking/){printf "1"}' \
					"${file}" 2>&- )
				if [ "${skip_network}" != "1" ]; then
					local listen_addr=$(read_iniconf "${file}" "mysqld" "bind-address" "=")
					local listen_port=$(read_iniconf "${file}" "mysqld" "port" "=")
					if [ -z "${listen_addr}" ]; then
						listen_addr="0.0.0.0"
					fi
					if [ -z "${listen_port}" ]; then
						listen_port="3306"
					fi
					bind_addr="${listen_addr}:${listen_port}"
				fi
			fi
		elif [ "${comp}" == "mysql_index" 	]; then
			file="$EM_CONFDIR_MYSQL/my_index.cnf"
			if [ -f "${file}" -a -s "${file}" ]; then
				local skip_network=$( awk '($0~/^[ \t]*#/){next;} \
					($0~/^[ \t]*\[mysqld\][ \t]*$/){x=1;next;} \
					(x==1 && $0~/^[ \t]*\[.+\][ \t]*$/){exit;} \
					(x==1 && $1~/^[ \t]*skip-networking/){printf "1"}' \
					"${file}" 2>&- )
				if [ "${skip_network}" != "1" ]; then
					local listen_addr=$(read_iniconf "${file}" "mysqld" "bind-address" "=")
					local listen_port=$(read_iniconf "${file}" "mysqld" "port" "=")
					if [ -z "${listen_addr}" ]; then
						listen_addr="0.0.0.0"
					fi
					if [ -z "${listen_port}" ]; then
						listen_port="3306"
					fi
					bind_addr="${listen_addr}:${listen_port}"
				fi
			fi
		elif [ "${comp}" == "mysql_log"   	]; then
			file="$EM_CONFDIR_MYSQL/my_log.cnf"
			if [ -f "${file}" -a -s "${file}" ]; then
				local skip_network=$( awk '($0~/^[ \t]*#/){next;} \
					($0~/^[ \t]*\[mysqld\][ \t]*$/){x=1;next;} \
					(x==1 && $0~/^[ \t]*\[.+\][ \t]*$/){exit;} \
					(x==1 && $1~/^[ \t]*skip-networking/){printf "1"}' \
					"${file}" 2>&- )
				if [ "${skip_network}" != "1" ]; then
					local listen_addr=$(read_iniconf "${file}" "mysqld" "bind-address" "=")
					local listen_port=$(read_iniconf "${file}" "mysqld" "port" "=")
					if [ -z "${listen_addr}" ]; then
						listen_addr="0.0.0.0"
					fi
					if [ -z "${listen_port}" ]; then
						listen_port="3306"
					fi
					bind_addr="${listen_addr}:${listen_port}"
				fi
			fi
		elif [ "${comp}" == "mproxy"      	]; then
			bind_addr=$(read_conf "${EM_INIT_CONFIG}" "MPROXY_LISTEN" "=")
			conn_addr=$(read_conf "${EM_INIT_CONFIG}" "MPROXY_BACKEND" "=")
		elif [ "${comp}" == "mproxy_index" 	]; then
			bind_addr=$(read_conf "${EM_INIT_CONFIG}" "MPROXY_INDEX_LISTEN" "=")
			conn_addr=$(read_conf "${EM_INIT_CONFIG}" "MPROXY_INDEX_BACKEND" "=")
		elif [ "${comp}" == "memcache_session"	]; then
			local listen_addr=$(read_conf "${EM_INIT_CONFIG}" "MEMCACHE_SESSION_LISTEN" "=")
			local listen_port=$(read_conf "${EM_INIT_CONFIG}" "MEMCACHE_SESSION_PORT" "=")
			if [ -n "${listen_addr}" -a -n "${listen_port}" ]; then
				bind_addr="${listen_addr}:${listen_port}"
			fi
		elif [ "${comp}" == "memcache_fix"	]; then
			local listen_addr=$(read_conf "${EM_INIT_CONFIG}" "MEMCACHE_FIX_LISTEN" "=")
			local listen_port=$(read_conf "${EM_INIT_CONFIG}" "MEMCACHE_FIX_PORT" "=")
			if [ -n "${listen_addr}" -a -n "${listen_port}" ]; then
				bind_addr="${listen_addr}:${listen_port}"
			fi
		elif [ "${comp}" == "memcache_hot"	]; then
			local listen_addr=$(read_conf "${EM_INIT_CONFIG}" "MEMCACHE_HOT_LISTEN" "=")
			local listen_port=$(read_conf "${EM_INIT_CONFIG}" "MEMCACHE_HOT_PORT" "=")
			if [ -n "${listen_addr}" -a -n "${listen_port}" ]; then
				bind_addr="${listen_addr}:${listen_port}"
			fi
		elif [ "${comp}" == "gearman"		]; then
			local listen_addr=$(read_conf "${EM_INIT_CONFIG}" "GEARMAN_LISTEN" "=")
			local listen_port=$(read_conf "${EM_INIT_CONFIG}" "GEARMAN_PORT" "=")
			if [ -n "${listen_addr}" -a -n "${listen_port}" ]; then
				bind_addr="${listen_addr}:${listen_port}"
			fi
			local gmysql_addr=$(read_conf "${EM_INIT_CONFIG}" "GEARMAN_MYSQL_HOST" "=")
			local gmysql_port=$(read_conf "${EM_INIT_CONFIG}" "GEARMAN_MYSQL_PORT" "=")
			if [ -n "${gmysql_addr}" -a -n "${gmysql_port}" ]; then
				conn_addr="${gmysql_addr}:${gmysql_port}"
			fi
		elif [ "${comp}" == "phpd"		]; then
			conn_addr="${conn_memcache_session} ${conn_memcache_fix} ${conn_memcache_hot}"
		elif [ "${comp}" == "filed"		]; then
			local listen_addr="0.0.0.0"
			local listen_port=$(read_iniconf "${EM_MTA_CONFIG}" "filed" "filed_port" "=")
			if [ -n "${listen_addr}" -a -n "${listen_port}" ]; then
				bind_addr="${listen_addr}:${listen_port}"
			fi
		elif [ "${comp}" == "filedagent"	]; then
			local listen_addr="0.0.0.0"
			local listen_port=$(read_iniconf "${EM_MTA_CONFIG}" "agent" "agent_port" "=")
			if [ -n "${listen_addr}" -a -n "${listen_port}" ]; then
				bind_addr="${listen_addr}:${listen_port}"
			fi
			if [ -f "${EM_FILEDAGENT_CONFIG}" -a -s "${EM_FILEDAGENT_CONFIG}" ]; then
				conn_addr=$( awk '($0~/^[ \t]*#/){next;} \
						(NF=="4" && $1~/[0-9]+/){printf "%s:%d ",$2,$3}' \
						"${EM_FILEDAGENT_CONFIG}" 2>&- )
			fi
		elif [ "${comp}" == "httpd"		]; then
			local file1="${EM_CONFDIR_APACHE}/httpd.conf"
			local file2="${EM_OPT_INSTALL}/conf/httpd.conf"
			if [ -f "${file1}" -a -s "${file1}" ]; then
				file="${file1}"
			elif [ "${file2}" -a -s "${file2}" ]; then
				file="${file2}"
			fi
			if [ -n "${file}" -a -f "${file}" -a -s "${file}" ]; then
				bind_addr=$( awk '($0~/^[ \t]*#/){next;} \
						(NF=="2" && $1=="Listen" && $2~/:/){printf "%s ",$2;next;} \
						(NF=="2" && $1=="Listen" && $2!~/:/){printf "0.0.0.0:%s ",$2;next;}' \
						"${file}" 2>&- )
			fi
		elif [ "${comp}" == "nginx"		]; then
			local file="${EM_CONFDIR_NGINX}/nginx.conf"	
			if [ -f "${file}" -a -s "${file}" ]; then
				local listen_addr="0.0.0.0"
				bind_addr="$(awk -v addr="${listen_addr}" '($0~/^[ \t]*#/){next;} \
					($0~/^[ \t]*server[ \t]*{[ \t]*$/){x=1;next;} \
					(x==1 && $0~/^[ \t]*}[ \t]*$/){exit;} \
					(x==1 && $1~/^[ \t]*listen[ \t]*/){gsub(";","",$2);printf "%s:%s ",addr,$2;next;}' \
					"${file}" 2>&- )"
				conn_addr="$(awk '($0~/^[ \t]*#/){next;} \
					($0~/^[ \t]*upstream[ \t]*apache_server[ \t]*{[ \t]*$/){x=1;next;} \
					(x==1 && $0~/^[ \t]*}[ \t]*$/){exit;} \
					(x==1 && $1~/^[ \t]*server[ \t]*/){gsub(";","",$2);printf "%s ",$2;next;}' \
					"${file}" 2>&- )"
			fi
		elif [ "${comp}" == "smtp"		]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "smtpd"   "smtpd_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "smtpd_1" "smtpd_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "smtpd_2" "smtpd_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		elif [ "${comp}" == "pop" -o "${comp}" == "pop3" ]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "pop3d"   "pop3d_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "pop3d_1" "pop3d_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "pop3d_2" "pop3d_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		elif [ "${comp}" == "imap"		]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "imapd"   "imapd_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "imapd_1" "imapd_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "imapd_2" "imapd_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		elif [ "${comp}" == "virusd"		]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "virusd"   "virusd_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "virusd_1" "virusd_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "virusd_2" "virusd_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		elif [ "${comp}" == "ecs_tracker"		]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "tracker"   "tracker_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "tracker_1" "tracker_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "tracker_2" "tracker_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		elif [ "${comp}" == "ecs_rstorage"		]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "rstorage"   "rstorage_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "rstorage_1" "rstorage_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "rstorage_2" "rstorage_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		elif [ "${comp}" == "ecs_wstorage"		]; then
			local addr1=$(read_iniconf "${EM_MTA_CONFIG}" "wstorage"   "wstorage_listener" "=")
			local addr2=$(read_iniconf "${EM_MTA_CONFIG}" "wstorage_1" "wstorage_listener" "=")
			local addr3=$(read_iniconf "${EM_MTA_CONFIG}" "wstorage_2" "wstorage_listener" "=")
			bind_addr="$(echo -en "${addr1} ${addr2} ${addr3}" | tr ',;' ' ' | sed -e 's/tcp:\/\///g') "
		fi

		comp_regex="$(get_emcomp_regex "${comp}" 2>&-)"
		min_running="$(get_emcomp_minr "${comp}" 2>&-)"
	fi
	
	case "${part}" in
	"bind_addr")
		result="${bind_addr}"		;;
	"conn_addr")
		result="${conn_addr}"		;;
	"comp_regex")
		result="${comp_regex}"	;;
	"min_running")
		result="${min_running}"		;;
	*)
		result="${bind_addr}\n${conn_addr}\n${comp_regex}\n${min_running}\n"	;;
	esac

	echo -en "${result}"
}

#
# Plugin Configuring Functions
# 
# config_pxxxxxx
#

#
# config for base plugins
#
config_pcpu_usage() {
	local rc=0

        local plugin="cpu_usage"
        local cfg1="uplimit"  cfg_value1="75"  cfg2="wa_uplimit" cfg_value2="20"
	local cfg3="sy_uplimit"  cfg_value3="30"  cfg4="us_uplimit"  cfg_value4="50"

        ${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))
	${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"; ((rc+=$?))
	${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"; ((rc+=$?))

	return $rc
}

config_pdisk_fs() {
	local rc=0

	local plugin="disk_fs"
	local file="/etc/mtab"	tune2fs="/sbin/tune2fs"
	local cfg1="fstype"  cfg_value1="ext2 ext3 ext4"  cfg2="exclude"  cfg_value2=

	if [ -f "${file}" -a -s "${file}" ]; then
		if [ -f "${tune2fs}" -a -x "${tune2fs}" ]; then
			local devices="$(awk '($3=="ext2" || $3=="ext3" || $3=="ext4") {print $1}' "${file}" 2>&-)"
			for d in `echo "${devices}"`
			do
				if [ "$( LANG=en_US.UTF-8 ${tune2fs} -l "${d}" 2>&1 | grep -E -o -i "has unsupported feature" )" != "" ]; then
					if [ -z "${cfg_value2}" ]; then
						cfg_value2="${d}"
					else
						cfg_value2="${cfg_value2} ${d}"
					fi
				fi
			done
		fi
	fi

	${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	if [ ! -z "${cfg_value2}" ]; then
		${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))
	fi

	return $rc
}

config_pdisk_space() {
	local rc=0

	local plugin="disk_space"
	local file="/etc/mtab"
	local cfg1="fstype"  cfg_value1="ext2 ext3 ext4"  cfg2="exclude_mpoint"  cfg_value2=
	local cfg3="space_pct"  cfg_value3="90"  cfg4="inode_pct"  cfg_value4="90"

	if [ -f "${file}" -a -s "${file}" ]; then
		if [ "$(awk '($2=="/boot"){print $2}' "${file}" 2>&-)" != "" ]; then
			cfg_value2="/boot"
		fi
	fi

	${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	if [ ! -z "${cfg_value2}" ]; then
		${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"; ((rc+=$?))
	${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"; ((rc+=$?))

	return $rc
}

config_pdisk_iostat() {
	local rc=0

	local plugin="disk_iostat"
	local file="/etc/mtab"
	local cfg1="dev_list"  cfg_value1=  cfg2="util_uplimit"  cfg_value2="70"

	if [ -f "${file}" -a -s "${file}" ]; then
		local devices="$(awk '($3=="ext2" || $3=="ext3" || $3=="ext4") {print $1}' "${file}" 2>&-)"
		for d in `echo "${devices}"`
		do
			if [ -b "${d}" ]; then
				if [ -z  "${cfg_value1}" ]; then
					cfg_value1="${d}"
				else
					cfg_value1="${cfg_value1} ${d}"
				fi
			fi
		done
	fi

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))

	return $rc
}

config_pmemory() {
	local rc=0

	local plugin="memory"
	local file="/proc/meminfo"
	local cfg1="mem_uplimit" cfg_value1="99.99"  cfg2="swp_uplimit" cfg_value2=

	if [ -f "${file}" ]; then
		local mem_size=$(awk '/^MemTotal:/ {print $2/1024/1024;exit;}' "${file}" 2>&-)
		if [ -z "${mem_size}" -o ! -z "${mem_size//[0-9.]}" ]; then
			cfg_value2=10
		elif [ "$(echo "${mem_size} >= 16" | bc 2>&-)" == "1" ]; then
                	cfg_value2=10
        	elif [ "$(echo "${mem_size} >=  8" | bc 2>&-)" == "1" ]; then
                	cfg_value2=20
        	else
                	cfg_value2=30
        	fi
	fi

	${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	if [ ! -z "${cfg_value2}" ]; then
		${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))
	fi

	return $rc
}

config_pnotify_oom() {
	local rc=0

	local plugin="notify_oom"
	local el5_file="/etc/syslog.conf"  el6_file="/etc/rsyslog.conf"	 file=
	local cfg="messagefile" cfg_value=

	if [ -f "${el5_file}" -a -s "${el5_file}" ]; then
		file="${el5_file}"
	elif [ -f "${el6_file}" -a -s "${el6_file}" ]; then
		file="${el6_file}"
	fi
	cfg_value="$(awk '($0~/^[ \t]*#/){next;} ($1~/\*\.info/){print $NF;exit;}' "${file}" 2>&-)"

	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
	fi

	return $rc
}

config_pnotify_syslogin() {
	local rc=0

        local plugin="notify_syslogin"
        local el5_file="/etc/syslog.conf"  el6_file="/etc/rsyslog.conf"  file=
        local cfg="authfile" cfg_value=

        if [ -f "${el5_file}" -a -s "${el5_file}" ]; then
                file="${el5_file}"
        elif [ -f "${el6_file}" -a -s "${el6_file}" ]; then
                file="${el6_file}"
        fi  
        cfg_value="$(awk '($0~/^[ \t]*#/){next;} ($1~/authpriv\.\*/){print $NF;exit;}' "${file}" 2>&-)"

        if [ ! -z "${cfg_value}" ]; then
                ${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
        fi  

	return $rc
}

config_pport() {
	local rc=0

	local plugin="port"
	local cfg="port_list"  cfg_value=

	local sshd_file="/etc/ssh/sshd_config"
	if [ -f "${sshd_file}" -a -s "${sshd_file}" ]; then
		local listen_addr="$(awk '($0~/^[ \t]*#/){next;} ($1~/^ListenAddress\>/){print $2;exit;}' "${sshd_file}" 2>&-)"
		local listen_port="$(awk '($0~/^[ \t]*#/){next;} ($1~/^Port\>/){print $2;exit;}' "${sshd_file}" 2>&-)"
		[ -z "${listen_addr}" ] && listen_addr="0.0.0.0"
		[ -z "${listen_port}" ] && listen_port="22"
		local sshd_bind_addr="${listen_addr}:${listen_port}"
		cfg_value="${sshd_bind_addr}"
	fi
	
	if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
		for comp in `list_emcomp`
		do
			if is_emstarton "${comp}" ; then
				if [ -z "${cfg_value}" ]; then
					cfg_value="$(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
					cfg_value="${cfg_value} $(get_emcompinfo "${comp}" "conn_addr" 2>&-)"
				else
					cfg_value="${cfg_value} $(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
					cfg_value="${cfg_value} $(get_emcompinfo "${comp}" "conn_addr" 2>&-)"
				fi
			fi
		done
	fi

	# remove duplication items.
	cfg_value=$(echo -e "${cfg_value}" | awk -vRS="[\n ]" -vORS=" " '!a[$0]++' 2>&- | sed -e 's/^[ \t]*//; s/[ \t]*$//;')
	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
	fi

	return $rc
}

config_pprocess() {
	local rc=0

	local plugin="process"
	local cfg="pslist_file"  cfg_value="opt/process.lst"

	local headline="# resource file which plugin process.pslist_file specified
# FORMAT: process-name   process-number[at least]   process-regex
# process-number will be 1 if not numberic
# automatic skip the line which not contains three filed
# search process via command:   ps -eo cmd= | grep -E -o -x -c {process-regex}
#
# Example:
# sshd		1		/usr/sbin/sshd.*
"

	if [ -f "/usr/sbin/sshd" -a -f "/etc/init.d/sshd" ]; then
		headline="${headline}\nsshd		1	/usr/sbin/sshd.*\n"
	fi

	local file="${MOLE_PATH}/${cfg_value}"

	touch "${file}" 1>/dev/null 2>&1
	if [ "$?" == "0" ]; then
        	{ 
		echo -e "${headline}"
		if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
			for comp in `list_emcomp`
        		do  
                	   if is_emstarton "${comp}" ; then
				echo -e "${comp}" "\t\t" "$(get_emcomp_minr "${comp}")" "\t" "$(get_emcomp_regex "${comp}")"
                	   fi  
        		done
		fi
		} > "${file}" 2>/dev/null
	else
		return 1
	fi
	if [ -f "${file}" -a -s "${file}" ]; then
		${MOLE} config-del ${plugin} ${cfg}; ((rc+=$?))
		${MOLE} config-add ${plugin} ${cfg} "file:${cfg_value}"; ((rc+=$?))
	fi

	return $rc
}

config_psysload() {
	local rc=0

	local plugin="sysload"
	local file="/proc/cpuinfo"
	local cfg="load_uplimit"  cfg_value=

	if [ -f "${file}" ]; then
		local cpunum=$(awk '(/^processor\s*\d*.*$/){x++} END{print x}' "${file}" 2>&-)
		if [ -z "${cpunum}" -o ! -z "${cpunum//[0-9]}" ]; then
			cfg_value=10
		else
                	if [ ${cpunum} -le 4 ]; then
                        	cfg_value=4
                	elif [ ${cpunum} -le 8 ]; then
                        	cfg_value=${cpunum}
                	elif [ ${cpunum} -le 16 ]; then
                        	cfg_value=$( echo "${cpunum} * 0.7" | bc 2>&-)
                	else
                        	cfg_value=$( echo "${cpunum} * 0.5" | bc 2>&-)
                	fi  
        	fi  
		if [ -z "${cfg_value}" -o ! -z "${cfg_value//[0-9.]}" ]; then
			cfg_value=10
		fi
	fi
	
	if [ ! -z "${cfg_value}" ]; then
                ${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
	fi

	return $rc
}

config_ptcp_conn() {
	local rc=0

	local plugin="tcp_conn"
	local cfg="port_list"  cfg_value=

	local sshd_file="/etc/ssh/sshd_config"
	if [ -f "${sshd_file}" -a -s "${sshd_file}" ]; then
		local listen_port="$(awk '($0~/^[ \t]*#/){next;} ($1~/^Port\>/){print $2;exit;}' "${sshd_file}" 2>&-)"
		[ -z "${listen_port}" ] && listen_port="22"
		cfg_value="${listen_port}:50"
	fi

	if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
		local bind_addr=  port=  max_conn=
		for comp in `list_emcomp`
		do
			if is_emstarton "${comp}" ; then
				max_conn="$(get_emcomp_maxc "${comp}")"
				if [ -n "${max_conn}" ]; then
					bind_addr="$(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
					for x in `echo "${bind_addr}"`
					do
						port=$(echo -e "${x}" | awk -F: '{print $NF}')
						if [ -n "${port}" ]; then
							if [ -z "${cfg_value}" ]; then
								cfg_value="${port}:${max_conn}"
							else
								cfg_value="${cfg_value} ${port}:${max_conn}"
							fi
						fi
					done
				fi
			fi
		done
	fi

	# remove duplication items.
	cfg_value=$(echo -e "${cfg_value}" | awk -vRS="[\n ]" -vORS=" " '!a[$0]++' | sed -e 's/^[ \t]*//; s/[ \t]*$//;')
	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
	fi

	return $rc
}

config_ptraffic() {
	local rc=0

	local plugin="traffic"
	local cfg="ifdev_lst"  cfg_value=
	
	local speed_limit="30M/s:50M/s:0:0"
	local netdev=$( get_inetorder 2>&- | awk '{print $1;exit;}' )
	
	if [ ! -z "${netdev}" ]; then
		cfg_value="${netdev}:${speed_limit}"
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
	fi

	return $rc
}

#
# config for mail plugins
#
config_pdns_svr() {
	local rc=0

	local plugin="dns_svr"
	local cfg1="dns_check_lst"   cfg_value1=   cfg2="max_wait_time"   cfg_value2="10"
		
	local base_domain="$(get_basedomain)"
	if [ ! -z "${base_domain}" ]; then
		cfg_value1="${base_domain}:mx,ns"
	fi

	local dns_atleast="eyou.net:mx,ns"

	if [ -z "${cfg_value1}" ]; then
		cfg_value1="${dns_atleast}"
	else
		cfg_value1="${cfg_value1} ${dns_atleast}"
	fi

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))

	return $rc
}

config_ppop_svr() {
	local rc=0

	local plugin="pop_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"
	local cfg3="pop_user"  cfg_value3="$1"  cfg4="pop_pass"  cfg_value4="$2"

        local comps=( 
                "pop" 
		"pop3"
         )

	if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
		local bind_addr=  port=	 tls_port=
		local tls_port1=$( read_iniconf "${EM_MTA_CONFIG}" "pop3d"     "pop3d_tls_port" "=" )
		local tls_port2=$( read_iniconf "${EM_MTA_CONFIG}" "pop3d_1"   "pop3d_tls_port" "=" )
		local tls_port3=$( read_iniconf "${EM_MTA_CONFIG}" "pop3d_2"   "pop3d_tls_port" "=" )
		local tls_port4=$( read_iniconf "${EM_MTA_CONFIG}" "pop3d"     "popsd_tls_port" "=" )
		local tls_port5=$( read_iniconf "${EM_MTA_CONFIG}" "pop3d_1"   "popsd_tls_port" "=" )
		local tls_port6=$( read_iniconf "${EM_MTA_CONFIG}" "pop3d_2"   "popsd_tls_port" "=" )
		tls_port="${tls_port1} ${tls_port2} ${tls_port3} ${tls_port4} ${tls_port5} ${tls_port6}"
		for comp in `echo "${comps[*]}"`
		do
			if is_emstarton "${comp}"; then
				bind_addr="$(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
				for x in `echo "${bind_addr}"`
				do
					port=$(echo -e "${x}" | awk -F: '{print $NF}')
					if is_sub "${port}" "${tls_port}"; then
						continue	# skip tls port
					fi
					if [ -z "${cfg_value1}" ]; then
						cfg_value1="${x}"
					else
						cfg_value1="${cfg_value1} ${x}"
					fi
				done
			fi
		done
	fi

        # remove duplication items.
        cfg_value1=$(echo -e "${cfg_value1}" | awk -vRS="[\n ]" -vORS=" " '!a[$0]++' 2>&- | sed -e 's/^[ \t]*//; s/[ \t]*$//;')
	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	if [ ! -z "${cfg_value3}" ]; then
		${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"; ((rc+=$?))
	fi
	if [ ! -z "${cfg_value4}" ]; then
		${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"; ((rc+=$?))
	fi

	return $rc
}

config_phttp_svr() {
	local rc=0

	local plugin="http_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"

	local comps=( 
		"httpd" 
		"nginx"
	 )
	
	if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
		local bind_addr=  port=  protocal=
		for comp in `echo "${comps[*]}"`
		do
			if is_emstarton "${comp}"; then
				bind_addr="$(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
				for x in `echo "${bind_addr}"`
				do
					port=$(echo -e "${x}" | awk -F: '{print $NF}')
					if [ "${port}" == "443" ]; then
						protocal="https"
					else
						protocal="http"
					fi
					if [ -z "${cfg_value1}" ]; then
						cfg_value1="${protocal}:${x}"
					else
						cfg_value1="${cfg_value1} ${protocal}:${x}"
					fi
				done
			fi
		done
	fi

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"; ((rc+=$?))

	return $rc
}

config_pimap_svr() {
	local rc=0

	local plugin="imap_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"
	local cfg3="imap_user"  cfg_value3="$1"  cfg4="imap_pass"  cfg_value4="$2"

        local comps=( 
                "imap" 
         )   

	if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
		local bind_addr=  port=  tls_port=
        	local tls_port1=$( read_iniconf "${EM_MTA_CONFIG}" "imapd"     "imapd_tls_port" "=" )
        	local tls_port2=$( read_iniconf "${EM_MTA_CONFIG}" "imapd_1"   "imapd_tls_port" "=" )
        	local tls_port3=$( read_iniconf "${EM_MTA_CONFIG}" "imapd_2"   "imapd_tls_port" "=" )
        	tls_port="${tls_port1} ${tls_port2} ${tls_port3}"
        	for comp in `echo "${comps[*]}"`
        	do  
                	bind_addr="$(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
                	for x in `echo "${bind_addr}"`
                	do  
				port=$(echo -e "${x}" | awk -F: '{print $NF}')
				if is_sub "${port}" "${tls_port}"; then
					continue        # skip tls port
				fi
                        	if [ -z "${cfg_value1}" ]; then
                                	cfg_value1="${x}"
                        	else
                                	cfg_value1="${cfg_value1} ${x}"
                        	fi  
                	done
        	done
	fi

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	if [ ! -z "${cfg_value3}" ]; then
		${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"; ((rc+=$?))
	fi
	if [ ! -z "${cfg_value4}" ]; then
		${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"; ((rc+=$?))
	fi

	return $rc
}

config_psmtp_svr() {
	local rc=0

	local plugin="smtp_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"
	local cfg3="smtp_user"  cfg_value3="$1"  cfg4="smtp_pass"  cfg_value4="$2"

        local comps=( 
                "smtp" 
         )   

	if [ "${IS_SUPPORTED_EMVERSION}" == "1" ]; then
		local bind_addr=  port=  tls_port=
	        local tls_port1=$( read_iniconf "${EM_MTA_CONFIG}" "smtpd"     "smtpd_tls_port" "=" )
	        local tls_port2=$( read_iniconf "${EM_MTA_CONFIG}" "smtpd_1"   "smtpd_tls_port" "=" )
	        local tls_port3=$( read_iniconf "${EM_MTA_CONFIG}" "smtpd_2"   "smtpd_tls_port" "=" )
	        tls_port="${tls_port1} ${tls_port2} ${tls_port3}"
	        for comp in `echo "${comps[*]}"`
	        do  
	                bind_addr="$(get_emcompinfo "${comp}" "bind_addr" 2>&-)"
	                for x in `echo "${bind_addr}"`
	                do  
				port=$(echo -e "${x}" | awk -F: '{print $NF}')
				if is_sub "${port}" "${tls_port}"; then
					continue        # skip tls port
				fi
	                        if [ -z "${cfg_value1}" ]; then
	                                cfg_value1="${x}"
	                        else
	                                cfg_value1="${cfg_value1} ${x}"
	                        fi  
	                done
	        done
	fi

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"; ((rc+=$?))
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	if [ ! -z "${cfg_value3}" ]; then
		${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"; ((rc+=$?))
	fi
	if [ ! -z "${cfg_value4}" ]; then
		${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"; ((rc+=$?))
	fi

	return $rc
}

config_pemp_mailqueue() {
	local rc=0

	local plugin="emp_mailqueue"
	local cfg="uplimit"	cfg_value="1000"

	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"; ((rc+=$?))
	fi
	
	return $rc
}


####################################
#                                  #
#  --*--< Main Body Begin >--*--   #
#                                  #
####################################


# 1. process arguments
[ "$#" == "0" ] && show_usage
[ "$1" == "-h" -o "$1" == "help" -o "$1" == "?" -o "$1" == "/?" ] && show_usage

# 2. automatic config/enable specified plugins
if [ "$1" == "rpminit" ]; then

	# check {MOLE} prepared ?
	if [ ! -f "${MOLE}" -o ! -x "${MOLE}" ]; then
		write_log "mole [${MOLE}] not prepared! exit!"
		exit 1
	fi

	# set _LOG/_DEBUG for write_log()
	export _LOG="${AUTOCONF_LOG}"	# set logfile
	export _DEBUG=1			# set debug flag

	# global vars def
	PREFIX="config_p"
	PLUGINS=		## plugins to be processed

	# receive plugin list
	if [ -z "$2" ]; then
		show_usage
	elif [ "$2" == "all" ]; then
		PLUGINS="$(${MOLE} ln 2>&-|tr '\n' ' ')"
	else
		shift 1
		PLUGINS="$*"
	fi

	# log start
	write_log ""
	write_log ""
	write_log "INFO: autoconf start"
	write_log "INFO: received arguments: [$@]"

	# 2.1  get eyoumail/gateway starton components
	EM_START=( $(get_emstart) )
	EMG_START=( $(get_emgstart) )
	EM_VERSION=$(get_emversion)
	EMG_VERSION=$(get_emgversion)
	if is_supported_emversion; then
		IS_SUPPORTED_EMVERSION=1
	else
		IS_SUPPORTED_EMVERSION=0
	fi
	if is_supported_emgversion; then
		IS_SUPPORTED_EMGVERSION=1
	else
		IS_SUPPORTED_EMGVERSION=0
	fi
	write_log "INFO: eyoumail starton components: [${EM_START[*]}](${#EM_START[*]})"
	#write_log "INFO: eyougateway starton components: [${EMG_START[*]}](${#EMG_START[*]})"
	write_log "INFO: eyoumail supported version: [${ARRAY_SUPPORTED_EMVERSION[*]}](${#ARRAY_SUPPORTED_EMVERSION[*]})"
	write_log "INFO: eyoumail installed version: ${EM_VERSION}, is supported: ${IS_SUPPORTED_EMVERSION}"
	#write_log "INFO: eyougateway supported version: [${ARRAY_SUPPORTED_EMGVERSION}](${#ARRAY_SUPPORTED_EMGVERSION[*]})"
	#write_log "INFO: eyougateway installed version: ${EMG_VERSION}, is supported: ${IS_SUPPORTED_EMGVERSION}"
	write_log "INFO: plugins to be config: [${PLUGINS}]"

	# 3.2  automatic config/enable specified plugins
	autoconf_eplugin(){
  		local plugin="$1"
  		if ${MOLE} enable "${plugin}" >/dev/null 2>&1; then
			write_log "INFO: plugin ${plugin} enabled succeed!"
  		else
			write_log "WARN: plugin ${plugin} enabled failed!($?)"
  		fi
	}

	# 3.3 replace emcomp special
	replace_emcomp_special

	# 3.4 config/enable plugins
	for plugin in `echo "${PLUGINS}"`
	do
		if [ "$(type -t "${PREFIX}${plugin}" 2>&-)" == "function" ]; then

			# config plugins here
			eval "${PREFIX}${plugin} >/dev/null 2>&1"
			rc=$?
			[ "$rc" == "0" ] && flag="INFO" || flag="WARN"
			write_log "${flag}: plugin ${plugin} automatic configuration finished($rc)"
	
			# enable plugins here
			case "${plugin}" in
			"dns_svr")
					autoconf_eplugin "${plugin}"
				;;
			"pop_svr")
				if is_emstarton "pop" || is_emstarton "pop3" ; then 
					autoconf_eplugin "${plugin}"
				else
					write_log "INFO: plugin ${plugin} no need to be enabled"
				fi
				;;
			"smtp_svr")
				if is_emstarton "smtp" ; then
					autoconf_eplugin "${plugin}"
				else
					write_log "INFO: plugin ${plugin} no need to be enabled"
				fi
				;;
			"imap_svr")
				if is_emstarton "imap" ; then
					autoconf_eplugin "${plugin}"
				else
					write_log "INFO: plugin ${plugin} no need to be enabled"
				fi
				;;
			"http_svr")
				if is_emstarton "nginx" || is_emstarton "httpd" ; then
					autoconf_eplugin "${plugin}"
				else
					write_log "INFO: plugin ${plugin} no need to be enabled"
				fi
				;;
			"emp_mailqueue")
				if is_emstarton "local" || is_emstarton "remote" ; then
					autoconf_eplugin "${plugin}"
				else
					write_log "INFO: plugin ${plugin} no need to be enabled"
				fi
				;;
			esac
		else
			write_log "NOTICE: plugin ${plugin} skipped, as function ${PREFIX}${plugin} not defined!"
		fi
	done

	# log end
	write_log "INFO: autoconf end." 
	write_log ""
fi
