#!/usr/bin/env bash
#
# ============================================================================
#  This Script Responsible for Configuring Plugins According by eYou Product
# ============================================================================
#
#

# === BASE_DIR DEF
#
[ -z ${BASE_DIR} ] && { 
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
}
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi

# === LOAD GETTEXT.SH FILE
#
if [ -f "/usr/bin/gettext.sh"  -a -s "/usr/bin/gettext.sh" ]; then
        source "/usr/bin/gettext.sh" 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load [/usr/bin/gettext.sh] failed with status $rc"
                exit 1
        }
else
        echo "[/usr/bin/gettext.sh] not exists or empty, maybe gettext not installed. exit"
        exit 1
fi

# === SET TEXTDOMAINDIR TEXTDOMAIN
#
if [ -d "${LOCALE_DIR}" -a -r "${LOCALE_DIR}" ]; then
        export TEXTDOMAINDIR="${LOCALE_DIR}"
        export TEXTDOMAIN="mole"
else
        echo "locale directory [${LOCALE_DIR}] not exist or accessable, exit"
        exit 1
fi

# === SET GLOBAL LOCALE
#
glocale=$(read_mole_config global locale)
if [ -z "${glocale}" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "zh_CN" -o "${glocale}" == "zh_CN.UTF-8" -o "${glocale}" == "zh" ]; then
        export LANG="zh_CN.UTF-8"
elif [ "${glocale}" == "en_US" -o "${glocale}" == "en_US.UTF-8" -o "${glocale}" == "en" ]; then
        export LANG="en_US.UTF-8"
else
        export LANG="zh_CN.UTF-8"
fi


####################################
#                                  #
#  --*--< Global Variables >--*--  #
#                                  #
####################################


# DIR DEF
EM_INSTALL="/usr/local/eyou/mail"
EM_CONFDIR="$EM_INSTALL/etc"
EM_CONFDIR_MYSQL="$EM_CONFDIR/mysql"
EM_CONFDIR_NGINX="$EM_CONFDIR/nginx"
EM_CONFDIR_APACHE="$EM_CONFDIR/httpd"
EM_CONFDIR_MPROXY="$EM_CONFDIR/mproxy"
EM_CONFDIR_CRTMP="$EM_CONFDIR/crtmpserver"
EM_CONFDIR_PHP="$EM_CONFDIR/php"
EM_CONFDIR_PHPZTS="$EM_CONFDIR/phpzts"
EMG_INSTALL="/var/emdg"
EMG_OPT_INSTALL="/opt"
EMG_CONFDIR="$EMG_INSTALL/etc"

# EM FILE DEF
EM_CONFIG="$EM_CONFDIR/eyou_mail.ini"
EM_INIT_CONFIG="$EM_CONFDIR/em_init_config"
EM_MTA_CONFIG="$EM_CONFDIR/em_mta.ini"
EM_PHPD_CONFIG="$EM_CONFDIR/em_phpd.ini"
EM_PLUGIN_CONFIG="$EM_CONFDIR/em_plugins.ini"
EM_MIGRATE_CONFIG="$EM_CONFDIR/em_migrate.ini"

# EMG FILE DEF
EMG_CONFIG="$EMG_CONFDIR/mail.conf"
EMG_DOMAIN_CONFIG="$EMG_CONFDIR/domain.conf"

# MOLE DEF
ESOP_PATH="/usr/local/esop/agent"
MOLE_PATH="${ESOP_PATH}/mole"
MOLE_SBIN="${MOLE_PATH}/sbin"
MOLE="${MOLE_SBIN}/mole"

# ARRAY EMCOMP
ARRAY_EMCOMP=(
	# comp		# comp_regex						# min_running
	"syslog"	"/usr/local/eyou/mail/app/bin/em_syslogd"							"1"
	"rsyslogd"	"/usr/local/eyou/mail/opt/sbin/rsyslogd.+rsyslogd.conf.+em_rsyslogd.pid.*"			"1"
	"mysql"  	".*/mysqld.*--defaults-file=/usr/local/eyou/mail/etc/mysql/my.cnf.+em_mysql.pid.*" 		"1"
	"mysql_index"	".*/mysqld.*--defaults-file=/usr/local/eyou/mail/etc/mysql/my_index.cnf.+em_mysql_index.pid.*"	"1"
	"mysql_log"	".*/mysqld.*--defaults-file=/usr/local/eyou/mail/etc/mysql/my_log.cnf.+em_mysql_log.pid.*"	"1"
	"mproxy"	"/usr/local/eyou/mail/opt/mproxy/libexec/mysql-proxy.*em_mproxy.pid.*"				"1"
	"mproxy_index"	"/usr/local/eyou/mail/opt/mproxy/libexec/mysql-proxy.*em_mproxy_index.pid.*"			"1"
	"memcache_session" "/usr/local/eyou/mail/opt/bin/memcached.+memcache_session.pid.*"				"1"
	"memcache_fix"	"/usr/local/eyou/mail/opt/bin/memcached.+memcache_fix.pid.*"					"1"
	"memcache_hot"	"/usr/local/eyou/mail/opt/bin/memcached.+memcache_hot.pid.*"					"1"
	"gearman"	"/usr/local/eyou/mail/opt/sbin/gearmand.+em_gearman.pid.+gearman_queue.+"			"1"
	"phpd"		"/usr/local/eyou/mail/opt/bin/php.+app/bin/em_phpd.*"						"6"
	"crtmpd"	"/usr/local/eyou/mail/opt/sbin/crtmpserver.*em_crtmpserver.pid.*"				"1"
	"ecs_rstorage"	"/usr/local/eyou/mail/bin/ecs_rstorage"								"2"
	"ecs_wstorage"	"/usr/local/eyou/mail/bin/ecs_wstorage"								"2"
	"ecs_tracker"	"/usr/local/eyou/mail/bin/ecs_tracker"								"2"
	"filed"		"/usr/local/eyou/mail/app/bin/em_filed.*"							"3"
	"filedrepd"	"/usr/local/eyou/mail/app/bin/em_filedrepd.*"							"1"
	"filedagenat"	"/usr/local/eyou/mail/app/bin/em_filedagent.*"							"3"
	"httpd"		"/usr/local/eyou/mail/opt/bin/httpd.+start.*"							"3"
	"nginx"		"nginx.*/usr/local/eyou/mail/opt/sbin/nginx.*"							"1"
	"bounce"	"/usr/local/eyou/mail/app/bin/em_bounce"							"3"
	"local"		"/usr/local/eyou/mail/app/bin/em_local"								"3"
	"remote"	"/usr/local/eyou/mail/app/bin/em_remote"							"3"
	"mlist"		"/usr/local/eyou/mail/app/bin/em_mlist"								"3"
	"smtp"		"/usr/local/eyou/mail/app/bin/em_smtpd"								"6"
	"pop"		"/usr/local/eyou/mail/app/bin/em_pop3d"								"6"
	"imap"		"/usr/local/eyou/mail/app/bin/em_imapd"								"6"
	"cleanup"	"/usr/local/eyou/mail/app/bin/em_cleanup.*"							"2"
)

####################################
#                                  #
#  --*--< Public Functions >--*--  #
#                                  #
####################################

read_conf() {
	local file=$1 config=$2 kvsep=$3
	local result=   awk=

	if [ -z "${kvsep}" ]; then
		awk=" awk "
	else
		awk=" awk -F"${kvsep}" "
	fi

	if [ -f "${file}" -a -s "${file}" ]; then
		if [ -z "${config}" ]; then
			result=$( ${awk} '($0~/^[ \t]*$/){next;}  {print $1;exit}' "${file}" 2>&- )
		else
			result=$( ${awk} '($1~/'$config'\>/) {$1="";print;exit;}' "${file}" 2>&- )
		fi
		result=$( echo -e "${result}" | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
	fi
	echo -en "${result}"
}

read_iniconf() {
	local file=$1 section=$2 config=$3 kvsep=$4
	local result=	awk=

	if [ -z "${kvsep}" ]; then
		awk=" awk "
	else
		awk=" awk -F"${kvsep}" "
	fi

	if [ -f "${file}" -a -s "${file}" ]; then
		result=$( cat ${file} | tr '\t' ' ' |\
                        ${awk} '\
                                ($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next}\
                                ( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit}\
                                ( k==1 && x==1 && $1~/^'${config}'\>/ ){$1="";print;exit}' 2>&- |\
                         sed -e 's/^[ \t]*//; s/[ \t]*$//;' 2>&- )
		result=$( echo -e "${result}" | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
	fi
	echo -en "${result}"
}

get_emstart() {
	local result=
	if [ -f "${EM_INIT_CONFIG}" -a -s "${EM_INIT_CONFIG}" ]; then
		result=$(awk 'BEGIN{x=0;y=0} ($0~/^[ \t]*ARRAY_START=\(/){x=1;y=1;next;} \
			($0~/^[ \t]*#/){next;} (x==1 && y==1 && $0~/^[ \t]*\)/){exit;} \
			(x==1 && y==1){gsub(" ","");print} ' "${EM_INIT_CONFIG}" 2>&-)
	fi
	echo -en "${result}"
}

get_emgstart() {
:
}

get_emport() {
:
}

get_emgport() {
:
}

get_basedomain() {
	local result=  file=	

	if [ -f "${EM_CONFIG}" -a -s "${EM_CONFIG}" ]; then
		result=$( read_conf "${EM_CONFIG}" "server_me" "=" 2>&- )
	elif [ -f "${EMG_DOMAIN_CONFIG}" -a -s "${EMG_DOMAIN_CONFIG}" ]; then
		result=$( read_conf "${EMG_DOMAIN_CONFIG}" "" 2>&- )
	fi

	echo -en "${result}"
}

# Should em_process start or not ?
# Usage:	is_emstarton	{process}
# Return:	0,1	|	yes,no
#
is_emstarton() {
	local process=$1

	[ -z "${EM_START}" ] && EM_START=( $(get_emstart) )
	[ -z "${process}" -o "${#EM_START[*]}" == "0" ] && return 1
	
	if is_sub "${process}" "${EM_START[*]}"; then
		return 0
	else
		return 1
	fi 
}

# Is EM_COMP or not ?
# Usage:	is_emcomp	{comp}
# Return:	0,1	| 	yes,no
# Output:	index number of EM_COMP
#
is_emcomp() {
	local comp=$1	rval=1
	local index=
	
	[ -z "${comp}" -o "${#ARRAY_EMCOMP[*]}" == "0" ] && return 1

	for ((i=0;i<=${#ARRAY_EMCOMP[*]}-1;i+=3))
	do
		if [ "${ARRAY_EMCOMP[$i]}" == "${comp}" ]; then
			index=$i
			rval=0
			break
		fi
	done
	
	echo -en "${index}"
	return $rval
}

# Get EM_COMP regex
#
get_emcomp_regex() {
	local comp=$1	result=
	local index=

	index=$(is_emcomp "${comp}" 2>&1)

	if [ "$?" == "0" ]; then
		((index++))
		result=${ARRAY_EMCOMP[$index]}
	fi

	echo -en "${result}"
}

# Get EM_COMP min_running
#
get_emcomp_minr() {
	local comp=$1	result=
	local index=
	
	index=$(is_emcomp "${comp}" 2>&1)

	if [ "$?" == "0" ]; then
		((index+=2))
		result=${ARRAY_EMCOMP[$index]}
	fi
		
	echo -en "${result}"
}	


# Print em_comp information
# Usage:	get_empsinfo	{comp}	{part}
# Note:		part  ~  bind_addr, conn_addr, comp_regex, min_running
# Output:	{bind_addr} {conn_addr} {comp_regex} {min_running}
#
get_empsinfo() {
	local comp=$1 part=$2 result=
	local bind_addr=  conn_addr=  comp_regex=  min_running=

	local file=
	if is_emcomp "${comp}" >/dev/null 2>&1; then
		if   [ "${comp}" == "mysql" 		]; then
			file="$EM_CONFDIR_MYSQL/my.cnf"
			if [ -f "${file}" -a -s "${file}" ]; then
				local mysqld_bind=$(read_iniconf "${file}" "mysqld" "bind-address" "=")
				local mysqld_port=$(read_iniconf "${file}" "mysqld" "port" "=")
				# bind_addr="${mysqld_bind}:${mysqld_port}"
			fi
		elif [ "${comp}" == "mysql_index" 	]; then
			file="$EM_CONFDIR_MYSQL/my_index.cnf"
		elif [ "${comp}" == "mysql_log"   	]; then
			file="$EM_CONFDIR_MYSQL/my_log.cnf"
		elif [ "${comp}" == "mproxy"      	]; then
		:
		elif [ "${comp}" == "mproxy_index" 	]; then
		:
		elif [ "${comp}" == "memcache_session"	]; then
		:
		fi

		comp_regex="$(get_emcomp_regex "${comp}" 2>&-)"
		min_running="$(get_emcomp_minr "${comp}" 2>&-)"
	fi
	
	case "${part}" in
	"bind_addr")
		result="${bind_addr}"		;;
	"conn_addr")
		result="${conn_addr}"		;;
	"comp_regex")
		result="${comp_regex}"	;;
	"min_running")
		result="${min_running}"		;;
	*)
		result="${bind_addr}\n${conn_addr}\n${comp_regex}\n${min_running}\n"	;;
	esac

	echo -en "${result}"
}
get_empsinfo mysql bind_addr;echo
get_empsinfo mysql conn_addr;echo
get_empsinfo mysql comp_regex;echo
get_empsinfo mysql min_running;echo
get_empsinfo mysql
exit;


#
# Plugin Configuring Functions
# 
# config_pxxxxxx
#
config_pnotify_oom() {
	local plugin="notify_oom"
	local el5_file="/etc/syslog.conf"  el6_file="/etc/rsyslog.conf"	 file=
	local cfg="messagefile" cfg_value=

	if [ -f "${el5_file}" -a -s "${el5_file}" ]; then
		file="${el5_file}"
	elif [ -f "${el6_file}" -a -s "${el6_file}" ]; then
		file="${el6_file}"
	fi
	cfg_value="$(awk '($0~/^[ \t]*#/){next;} ($1~/\*\.info/){print $NF;exit;}' "${file}" 2>&-)"

	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
	fi
}

config_pnotify_syslogin() {
        local plugin="notify_syslogin"
        local el5_file="/etc/syslog.conf"  el6_file="/etc/rsyslog.conf"  file=
        local cfg="authfile" cfg_value=

        if [ -f "${el5_file}" -a -s "${el5_file}" ]; then
                file="${el5_file}"
        elif [ -f "${el6_file}" -a -s "${el6_file}" ]; then
                file="${el6_file}"
        fi  
        cfg_value="$(awk '($0~/^[ \t]*#/){next;} ($1~/authpriv\.\*/){print $NF;exit;}' "${file}" 2>&-)"

        if [ ! -z "${cfg_value}" ]; then
                ${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
        fi  
}

config_pmemory() {
	local plugin="memory"
	local file="/proc/meminfo"
	local cfg1="mem_uplimit" cfg_value1="99.99"  cfg2="swp_uplimit" cfg_value2=

	if [ -f "${file}" ]; then
		local mem_size=$(awk '/^MemTotal:/ {print $2/1024/1024;exit;}' "${file}" 2>&-)
		if [ -z "${mem_size}" -o ! -z "${mem_size//[0-9.]}" ]; then
			cfg_value2=10
		elif [ "$(echo "${mem_size} >= 16" | bc 2>&-)" == "1" ]; then
                	cfg_value2=10
        	elif [ "$(echo "${mem_size} >=  8" | bc 2>&-)" == "1" ]; then
                	cfg_value2=20
        	else
                	cfg_value2=30
        	fi
	fi

	${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	if [ ! -z "${cfg_value2}" ]; then
		${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	fi
}

config_psysload() {
	local plugin="sysload"
	local file="/proc/cpuinfo"
	local cfg="load_uplimit"  cfg_value=

	if [ -f "${file}" ]; then
		local cpunum=$(awk '(/^processor\s*\d*.*$/){x++} END{print x}' "${file}" 2>&-)
		if [ -z "${cpunum}" -o ! -z "${cpunum//[0-9]}" ]; then
			cfg_value=10
		else
                	if [ ${cpunum} -le 4 ]; then
                        	cfg_value=4
                	elif [ ${cpunum} -le 8 ]; then
                        	cfg_value=${cpunum}
                	elif [ ${cpunum} -le 16 ]; then
                        	cfg_value=$( echo "${cpunum} * 0.7" | bc 2>&-)
                	else
                        	cfg_value=$( echo "${cpunum} * 0.5" | bc 2>&-)
                	fi  
        	fi  
		if [ -z "${cfg_value}" -o ! -z "${cfg_value//[0-9.]}" ]; then
			cfg_value=10
		fi
	fi
	
	if [ ! -z "${cfg_value}" ]; then
                ${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
	fi
}

config_pdisk_space() {
	local plugin="disk_space"
	local file="/etc/mtab"
	local cfg1="fstype"  cfg_value1="ext2 ext3 ext4"  cfg2="exclude_mpoint"  cfg_value2=
	local cfg3="space_pct"  cfg_value3="90"  cfg4="inode_pct"  cfg_value4="90"

	if [ -f "${file}" -a -s "${file}" ]; then
		if [ "$(awk '($2=="/boot"){print $2}' "${file}" 2>&-)" != "" ]; then
			cfg_value2="/boot"
		fi
	fi

	${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	if [ ! -z "${cfg_value2}" ]; then
		${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	fi
	${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"
	${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"
}

config_pdisk_fs() {
	local plugin="disk_fs"
	local file="/etc/mtab"	tune2fs="/sbin/tune2fs"
	local cfg1="fstype"  cfg_value1="ext2 ext3 ext4"  cfg2="exclude"  cfg_value2=

	if [ -f "${file}" -a -s "${file}" ]; then
		if [ -f "${tune2fs}" -a -x "${tune2fs}" ]; then
			local devices="$(awk '($3=="ext2" || $3=="ext3" || $3=="ext4") {print $1}' "${file}" 2>&-)"
			for d in `echo "${devices}"`
			do
				if [ "$( ${tune2fs} -l "${d}" 2>&1 | grep -E -o -i "has unsupported feature" )" != "" ]; then
					cfg_value2="${cfg_value2} ${d}"
				fi
			done
		fi
	fi

	${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	if [ ! -z "${cfg_value2}" ]; then
		${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	fi
}

config_pdisk_iostat() {
	local plugin="disk_iostat"
	local file="/etc/mtab"
	local cfg1="dev_list"  cfg_value1=  cfg2="util_uplimit"  cfg_value2="50"

	if [ -f "${file}" -a -s "${file}" ]; then
		local devices="$(awk '($3=="ext2" || $3=="ext3" || $3=="ext4") {print $1}' "${file}" 2>&-)"
		for d in `echo "${devices}"`
		do
			if [ -b "${d}" ]; then
				cfg_value1="${cfg_value1} ${d}"
			fi
		done
	fi

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
}

config_ptraffic() {
	local plugin="traffic"
	local file="/proc/net/dev"
	local cfg="ifdev_lst"  cfg_value=
	
	if [ -f "${file}" ]; then
                local cfg_value=$( awk -F: '(NF!=2){next;} ($1~/\<lo\>/){next;} {print $1,$2}' "${file}" 2>&- |\
					 awk '($2!=0 && $3!=0){print $1;exit;}' |\
					 tr -d '\r\n\t ')
        fi 
	
	if [ ! -z "${cfg_value}" ]; then
		cfg_value="${cfg_value}:5M/s:10M/s:0:0"
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
	fi
}

config_pport() {
	local plugin="port"
	local cfg="port_list"  cfg_value=


	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
	fi
}

config_pprocess() {
	local plugin="process"
	local cfg="pslist_file"  cfg_value=


	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
	fi
}

config_ptcp_conn() {
	local plugin="tcp_conn"
	local cfg="port_list"  cfg_value=

	if [ ! -z "${cfg_value}" ]; then
		${MOLE} config-update ${plugin} ${cfg} "${cfg_value}"
	fi
}

config_phttp_svr() {
	local plugin="http_svr"
	local cfg1="addr_port"  cfg_value=  cfg2="time_out"  cfg_value2="10"

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
}
config_phttp_svr

config_ppop_svr() {
	local plugin="pop_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"
	local cfg3="pop_user"  cfg_value3="$2"  cfg4="pop_pass"  cfg_value4="$3"

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	if [ ! -z "${cfg_value3}" ]; then
		${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"
	fi
	if [ ! -z "${cfg_value4}" ]; then
		${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"
	fi
}

config_psmtp_svr() {
	local plugin="smtp_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"
	local cfg3="smtp_user"  cfg_value3="$2"  cfg4="smtp_pass"  cfg_value4="$3"

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	if [ ! -z "${cfg_value3}" ]; then
		${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"
	fi
	if [ ! -z "${cfg_value4}" ]; then
		${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"
	fi
}

config_pimap_svr() {
	local plugin="imap_svr"
	local cfg1="addr_port"  cfg_value1=  cfg2="time_out"  cfg_value2="10"
	local cfg3="imap_user"  cfg_value3="$2"  cfg4="imap_pass"  cfg_value4="$3"

	if [ ! -z "${cfg_value1}" ]; then
		${MOLE} config-update ${plugin} ${cfg1} "${cfg_value1}"
	fi
	${MOLE} config-update ${plugin} ${cfg2} "${cfg_value2}"
	if [ ! -z "${cfg_value3}" ]; then
		${MOLE} config-update ${plugin} ${cfg3} "${cfg_value3}"
	fi
	if [ ! -z "${cfg_value4}" ]; then
		${MOLE} config-update ${plugin} ${cfg4} "${cfg_value4}"
	fi
}

####################################
#                                  #
#  --*--< Main Body Begin >--*--   #
#                                  #
####################################


if [ ! -f "${MOLE}" -o ! -x "${MOLE}" ]; then
	exit 1
fi

# collectint config stuff
EM_START=( $(get_emstart) )
EMG_SATRT=( $(get_emgstart) )

EM_PORT=( $(get_emport) )
EMG_PORT=( $(get_emgport) )



# process user args
# mode="print, config"
